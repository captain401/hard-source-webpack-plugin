'use strict';

const cachePrefix = require('./util').cachePrefix;
const logMessages = require('./util/log-messages');
const pluginCompat = require('./util/plugin-compat');

class TransformCompilationPlugin {
  apply(compiler) {
    let store;

    pluginCompat.tap(compiler, '_hardSourceMethods', 'TransformCompilationPlugin copy methods', methods => {
      store = methods.store;
      // fetch = methods.fetch;
      // freeze = methods.freeze;
      // thaw = methods.thaw;
    });

    pluginCompat.tap(compiler, '_hardSourceFreezeCompilation', 'TransformCompilationPlugin freeze', (_, compilation) => {
      compilation.modules.forEach(module => {
        const identifierPrefix = cachePrefix(compilation);
        if (identifierPrefix === null) {
          return;
        }
        const identifier = identifierPrefix + module.identifier();

        try {
          store('Module', identifier, module, {
            id: identifier,
            compilation
          });
        } catch (e) {
          logMessages.moduleFreezeError(compilation, module, e);
        }
      });
    });
  }
}

module.exports = TransformCompilationPlugin;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9UcmFuc2Zvcm1Db21waWxhdGlvblBsdWdpbi5qcyJdLCJuYW1lcyI6WyJjYWNoZVByZWZpeCIsInJlcXVpcmUiLCJsb2dNZXNzYWdlcyIsInBsdWdpbkNvbXBhdCIsIlRyYW5zZm9ybUNvbXBpbGF0aW9uUGx1Z2luIiwiYXBwbHkiLCJjb21waWxlciIsInN0b3JlIiwidGFwIiwibWV0aG9kcyIsIl8iLCJjb21waWxhdGlvbiIsIm1vZHVsZXMiLCJmb3JFYWNoIiwibW9kdWxlIiwiaWRlbnRpZmllclByZWZpeCIsImlkZW50aWZpZXIiLCJpZCIsImUiLCJtb2R1bGVGcmVlemVFcnJvciIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsY0FBY0Msa0JBQWtCRCxXQUF0QztBQUNBLE1BQU1FLGNBQWNELDhCQUFwQjtBQUNBLE1BQU1FLGVBQWVGLCtCQUFyQjs7QUFFQSxNQUFNRywwQkFBTixDQUFpQztBQUMvQkMsUUFBTUMsUUFBTixFQUFnQjtBQUNkLFFBQUlDLEtBQUo7O0FBRUFKLGlCQUFhSyxHQUFiLENBQ0VGLFFBREYsRUFFRSxvQkFGRixFQUdFLHlDQUhGLEVBSUVHLFdBQVc7QUFDVEYsY0FBUUUsUUFBUUYsS0FBaEI7QUFDQTtBQUNBO0FBQ0E7QUFDRCxLQVRIOztBQVlBSixpQkFBYUssR0FBYixDQUNFRixRQURGLEVBRUUsOEJBRkYsRUFHRSxtQ0FIRixFQUlFLENBQUNJLENBQUQsRUFBSUMsV0FBSixLQUFvQjtBQUNsQkEsa0JBQVlDLE9BQVosQ0FBb0JDLE9BQXBCLENBQTRCQyxVQUFVO0FBQ3BDLGNBQU1DLG1CQUFtQmYsWUFBWVcsV0FBWixDQUF6QjtBQUNBLFlBQUlJLHFCQUFxQixJQUF6QixFQUErQjtBQUM3QjtBQUNEO0FBQ0QsY0FBTUMsYUFBYUQsbUJBQW1CRCxPQUFPRSxVQUFQLEVBQXRDOztBQUVBLFlBQUk7QUFDRlQsZ0JBQU0sUUFBTixFQUFnQlMsVUFBaEIsRUFBNEJGLE1BQTVCLEVBQW9DO0FBQ2xDRyxnQkFBSUQsVUFEOEI7QUFFbENMO0FBRmtDLFdBQXBDO0FBSUQsU0FMRCxDQUtFLE9BQU9PLENBQVAsRUFBVTtBQUNWaEIsc0JBQVlpQixpQkFBWixDQUE4QlIsV0FBOUIsRUFBMkNHLE1BQTNDLEVBQW1ESSxDQUFuRDtBQUNEO0FBQ0YsT0FmRDtBQWdCRCxLQXJCSDtBQXVCRDtBQXZDOEI7O0FBMENqQ0osT0FBT00sT0FBUCxHQUFpQmhCLDBCQUFqQiIsImZpbGUiOiJoYXJkLXNvdXJjZS13ZWJwYWNrLXBsdWdpbi9saWIvVHJhbnNmb3JtQ29tcGlsYXRpb25QbHVnaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjYWNoZVByZWZpeCA9IHJlcXVpcmUoJy4vdXRpbCcpLmNhY2hlUHJlZml4O1xuY29uc3QgbG9nTWVzc2FnZXMgPSByZXF1aXJlKCcuL3V0aWwvbG9nLW1lc3NhZ2VzJyk7XG5jb25zdCBwbHVnaW5Db21wYXQgPSByZXF1aXJlKCcuL3V0aWwvcGx1Z2luLWNvbXBhdCcpO1xuXG5jbGFzcyBUcmFuc2Zvcm1Db21waWxhdGlvblBsdWdpbiB7XG4gIGFwcGx5KGNvbXBpbGVyKSB7XG4gICAgbGV0IHN0b3JlO1xuXG4gICAgcGx1Z2luQ29tcGF0LnRhcChcbiAgICAgIGNvbXBpbGVyLFxuICAgICAgJ19oYXJkU291cmNlTWV0aG9kcycsXG4gICAgICAnVHJhbnNmb3JtQ29tcGlsYXRpb25QbHVnaW4gY29weSBtZXRob2RzJyxcbiAgICAgIG1ldGhvZHMgPT4ge1xuICAgICAgICBzdG9yZSA9IG1ldGhvZHMuc3RvcmU7XG4gICAgICAgIC8vIGZldGNoID0gbWV0aG9kcy5mZXRjaDtcbiAgICAgICAgLy8gZnJlZXplID0gbWV0aG9kcy5mcmVlemU7XG4gICAgICAgIC8vIHRoYXcgPSBtZXRob2RzLnRoYXc7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICBwbHVnaW5Db21wYXQudGFwKFxuICAgICAgY29tcGlsZXIsXG4gICAgICAnX2hhcmRTb3VyY2VGcmVlemVDb21waWxhdGlvbicsXG4gICAgICAnVHJhbnNmb3JtQ29tcGlsYXRpb25QbHVnaW4gZnJlZXplJyxcbiAgICAgIChfLCBjb21waWxhdGlvbikgPT4ge1xuICAgICAgICBjb21waWxhdGlvbi5tb2R1bGVzLmZvckVhY2gobW9kdWxlID0+IHtcbiAgICAgICAgICBjb25zdCBpZGVudGlmaWVyUHJlZml4ID0gY2FjaGVQcmVmaXgoY29tcGlsYXRpb24pO1xuICAgICAgICAgIGlmIChpZGVudGlmaWVyUHJlZml4ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSBpZGVudGlmaWVyUHJlZml4ICsgbW9kdWxlLmlkZW50aWZpZXIoKTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdG9yZSgnTW9kdWxlJywgaWRlbnRpZmllciwgbW9kdWxlLCB7XG4gICAgICAgICAgICAgIGlkOiBpZGVudGlmaWVyLFxuICAgICAgICAgICAgICBjb21waWxhdGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZ01lc3NhZ2VzLm1vZHVsZUZyZWV6ZUVycm9yKGNvbXBpbGF0aW9uLCBtb2R1bGUsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm1Db21waWxhdGlvblBsdWdpbjtcbiJdLCJzb3VyY2VSb290IjoiL1VzZXJzL3R5bGVyYXJidXMvZGV2L3Byb3ZpZGVyL3NyYyJ9

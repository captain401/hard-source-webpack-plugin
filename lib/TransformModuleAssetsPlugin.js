'use strict';

const pluginCompat = require('./util/plugin-compat');

class TransformModuleAssetsPlugin {
  apply(compiler) {
    let store;
    let fetch;

    pluginCompat.tap(compiler, '_hardSourceMethods', 'TransformModuleAssetsPlugin copy methods', methods => {
      store = methods.store;
      fetch = methods.fetch;
      // freeze = methods.freeze;
      // thaw = methods.thaw;
      // mapFreeze = methods.mapFreeze;
      // mapThaw = methods.mapThaw;
    });

    pluginCompat.tap(compiler, '_hardSourceFreezeModuleAssets', 'TransformModuleAssetsPlugin freeze', (frozen, assets, extra) => {
      if (!frozen && assets) {
        Object.keys(assets).forEach(key => {
          store('Asset', key, assets[key], extra);
        });
        frozen = Object.keys(assets);
      }

      return frozen;
    });

    pluginCompat.tap(compiler, '_hardSourceThawModuleAssets', 'TransformModuleAssetsPlugin thaw', (assets, frozen, extra) => {
      if (!assets && frozen) {
        assets = {};
        frozen.forEach(key => {
          assets[key] = fetch('Asset', key, extra);
        });
      }

      return assets;
    });
  }
}

module.exports = TransformModuleAssetsPlugin;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9UcmFuc2Zvcm1Nb2R1bGVBc3NldHNQbHVnaW4uanMiXSwibmFtZXMiOlsicGx1Z2luQ29tcGF0IiwicmVxdWlyZSIsIlRyYW5zZm9ybU1vZHVsZUFzc2V0c1BsdWdpbiIsImFwcGx5IiwiY29tcGlsZXIiLCJzdG9yZSIsImZldGNoIiwidGFwIiwibWV0aG9kcyIsImZyb3plbiIsImFzc2V0cyIsImV4dHJhIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLGVBQWVDLCtCQUFyQjs7QUFFQSxNQUFNQywyQkFBTixDQUFrQztBQUNoQ0MsUUFBTUMsUUFBTixFQUFnQjtBQUNkLFFBQUlDLEtBQUo7QUFDQSxRQUFJQyxLQUFKOztBQUVBTixpQkFBYU8sR0FBYixDQUNFSCxRQURGLEVBRUUsb0JBRkYsRUFHRSwwQ0FIRixFQUlFSSxXQUFXO0FBQ1RILGNBQVFHLFFBQVFILEtBQWhCO0FBQ0FDLGNBQVFFLFFBQVFGLEtBQWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRCxLQVhIOztBQWNBTixpQkFBYU8sR0FBYixDQUNFSCxRQURGLEVBRUUsK0JBRkYsRUFHRSxvQ0FIRixFQUlFLENBQUNLLE1BQUQsRUFBU0MsTUFBVCxFQUFpQkMsS0FBakIsS0FBMkI7QUFDekIsVUFBSSxDQUFDRixNQUFELElBQVdDLE1BQWYsRUFBdUI7QUFDckJFLGVBQU9DLElBQVAsQ0FBWUgsTUFBWixFQUFvQkksT0FBcEIsQ0FBNEJDLE9BQU87QUFDakNWLGdCQUFNLE9BQU4sRUFBZVUsR0FBZixFQUFvQkwsT0FBT0ssR0FBUCxDQUFwQixFQUFpQ0osS0FBakM7QUFDRCxTQUZEO0FBR0FGLGlCQUFTRyxPQUFPQyxJQUFQLENBQVlILE1BQVosQ0FBVDtBQUNEOztBQUVELGFBQU9ELE1BQVA7QUFDRCxLQWJIOztBQWdCQVQsaUJBQWFPLEdBQWIsQ0FDRUgsUUFERixFQUVFLDZCQUZGLEVBR0Usa0NBSEYsRUFJRSxDQUFDTSxNQUFELEVBQVNELE1BQVQsRUFBaUJFLEtBQWpCLEtBQTJCO0FBQ3pCLFVBQUksQ0FBQ0QsTUFBRCxJQUFXRCxNQUFmLEVBQXVCO0FBQ3JCQyxpQkFBUyxFQUFUO0FBQ0FELGVBQU9LLE9BQVAsQ0FBZUMsT0FBTztBQUNwQkwsaUJBQU9LLEdBQVAsSUFBY1QsTUFBTSxPQUFOLEVBQWVTLEdBQWYsRUFBb0JKLEtBQXBCLENBQWQ7QUFDRCxTQUZEO0FBR0Q7O0FBRUQsYUFBT0QsTUFBUDtBQUNELEtBYkg7QUFlRDtBQWxEK0I7O0FBcURsQ00sT0FBT0MsT0FBUCxHQUFpQmYsMkJBQWpCIiwiZmlsZSI6ImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9UcmFuc2Zvcm1Nb2R1bGVBc3NldHNQbHVnaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwbHVnaW5Db21wYXQgPSByZXF1aXJlKCcuL3V0aWwvcGx1Z2luLWNvbXBhdCcpO1xuXG5jbGFzcyBUcmFuc2Zvcm1Nb2R1bGVBc3NldHNQbHVnaW4ge1xuICBhcHBseShjb21waWxlcikge1xuICAgIGxldCBzdG9yZTtcbiAgICBsZXQgZmV0Y2g7XG5cbiAgICBwbHVnaW5Db21wYXQudGFwKFxuICAgICAgY29tcGlsZXIsXG4gICAgICAnX2hhcmRTb3VyY2VNZXRob2RzJyxcbiAgICAgICdUcmFuc2Zvcm1Nb2R1bGVBc3NldHNQbHVnaW4gY29weSBtZXRob2RzJyxcbiAgICAgIG1ldGhvZHMgPT4ge1xuICAgICAgICBzdG9yZSA9IG1ldGhvZHMuc3RvcmU7XG4gICAgICAgIGZldGNoID0gbWV0aG9kcy5mZXRjaDtcbiAgICAgICAgLy8gZnJlZXplID0gbWV0aG9kcy5mcmVlemU7XG4gICAgICAgIC8vIHRoYXcgPSBtZXRob2RzLnRoYXc7XG4gICAgICAgIC8vIG1hcEZyZWV6ZSA9IG1ldGhvZHMubWFwRnJlZXplO1xuICAgICAgICAvLyBtYXBUaGF3ID0gbWV0aG9kcy5tYXBUaGF3O1xuICAgICAgfSxcbiAgICApO1xuXG4gICAgcGx1Z2luQ29tcGF0LnRhcChcbiAgICAgIGNvbXBpbGVyLFxuICAgICAgJ19oYXJkU291cmNlRnJlZXplTW9kdWxlQXNzZXRzJyxcbiAgICAgICdUcmFuc2Zvcm1Nb2R1bGVBc3NldHNQbHVnaW4gZnJlZXplJyxcbiAgICAgIChmcm96ZW4sIGFzc2V0cywgZXh0cmEpID0+IHtcbiAgICAgICAgaWYgKCFmcm96ZW4gJiYgYXNzZXRzKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMoYXNzZXRzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBzdG9yZSgnQXNzZXQnLCBrZXksIGFzc2V0c1trZXldLCBleHRyYSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZnJvemVuID0gT2JqZWN0LmtleXMoYXNzZXRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmcm96ZW47XG4gICAgICB9LFxuICAgICk7XG5cbiAgICBwbHVnaW5Db21wYXQudGFwKFxuICAgICAgY29tcGlsZXIsXG4gICAgICAnX2hhcmRTb3VyY2VUaGF3TW9kdWxlQXNzZXRzJyxcbiAgICAgICdUcmFuc2Zvcm1Nb2R1bGVBc3NldHNQbHVnaW4gdGhhdycsXG4gICAgICAoYXNzZXRzLCBmcm96ZW4sIGV4dHJhKSA9PiB7XG4gICAgICAgIGlmICghYXNzZXRzICYmIGZyb3plbikge1xuICAgICAgICAgIGFzc2V0cyA9IHt9O1xuICAgICAgICAgIGZyb3plbi5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBhc3NldHNba2V5XSA9IGZldGNoKCdBc3NldCcsIGtleSwgZXh0cmEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzc2V0cztcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybU1vZHVsZUFzc2V0c1BsdWdpbjtcbiJdLCJzb3VyY2VSb290IjoiL1VzZXJzL3R5bGVyYXJidXMvZGV2L3Byb3ZpZGVyL3NyYyJ9

"use strict";

// Perform a set of tasks in array quickly. Sometimes testing much better for
// large sets of work instead of individual promises.
const bulkFsTask = (array, each) => new Promise((resolve, reject) => {
  let ops = 0;
  const out = [];
  array.forEach((item, i) => {
    out[i] = each(item, (back, callback) => {
      ops++;
      return (err, value) => {
        try {
          out[i] = back(err, value, out[i]);
        } catch (e) {
          return reject(e);
        }

        ops--;
        if (ops === 0) {
          resolve(out);
        }
      };
    });
  });
  if (ops === 0) {
    resolve(out);
  }
});

module.exports = bulkFsTask;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi91dGlsL2J1bGstZnMtdGFzay5qcyJdLCJuYW1lcyI6WyJidWxrRnNUYXNrIiwiYXJyYXkiLCJlYWNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvcHMiLCJvdXQiLCJmb3JFYWNoIiwiaXRlbSIsImkiLCJiYWNrIiwiY2FsbGJhY2siLCJlcnIiLCJ2YWx1ZSIsImUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQSxNQUFNQSxhQUFhLENBQUNDLEtBQUQsRUFBUUMsSUFBUixLQUNqQixJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQy9CLE1BQUlDLE1BQU0sQ0FBVjtBQUNBLFFBQU1DLE1BQU0sRUFBWjtBQUNBTixRQUFNTyxPQUFOLENBQWMsQ0FBQ0MsSUFBRCxFQUFPQyxDQUFQLEtBQWE7QUFDekJILFFBQUlHLENBQUosSUFBU1IsS0FBS08sSUFBTCxFQUFXLENBQUNFLElBQUQsRUFBT0MsUUFBUCxLQUFvQjtBQUN0Q047QUFDQSxhQUFPLENBQUNPLEdBQUQsRUFBTUMsS0FBTixLQUFnQjtBQUNyQixZQUFJO0FBQ0ZQLGNBQUlHLENBQUosSUFBU0MsS0FBS0UsR0FBTCxFQUFVQyxLQUFWLEVBQWlCUCxJQUFJRyxDQUFKLENBQWpCLENBQVQ7QUFDRCxTQUZELENBRUUsT0FBT0ssQ0FBUCxFQUFVO0FBQ1YsaUJBQU9WLE9BQU9VLENBQVAsQ0FBUDtBQUNEOztBQUVEVDtBQUNBLFlBQUlBLFFBQVEsQ0FBWixFQUFlO0FBQ2JGLGtCQUFRRyxHQUFSO0FBQ0Q7QUFDRixPQVhEO0FBWUQsS0FkUSxDQUFUO0FBZUQsR0FoQkQ7QUFpQkEsTUFBSUQsUUFBUSxDQUFaLEVBQWU7QUFDYkYsWUFBUUcsR0FBUjtBQUNEO0FBQ0YsQ0F2QkQsQ0FERjs7QUEwQkFTLE9BQU9DLE9BQVAsR0FBaUJqQixVQUFqQiIsImZpbGUiOiJoYXJkLXNvdXJjZS13ZWJwYWNrLXBsdWdpbi9saWIvdXRpbC9idWxrLWZzLXRhc2suanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQZXJmb3JtIGEgc2V0IG9mIHRhc2tzIGluIGFycmF5IHF1aWNrbHkuIFNvbWV0aW1lcyB0ZXN0aW5nIG11Y2ggYmV0dGVyIGZvclxuLy8gbGFyZ2Ugc2V0cyBvZiB3b3JrIGluc3RlYWQgb2YgaW5kaXZpZHVhbCBwcm9taXNlcy5cbmNvbnN0IGJ1bGtGc1Rhc2sgPSAoYXJyYXksIGVhY2gpID0+XG4gIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgb3BzID0gMDtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBhcnJheS5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XG4gICAgICBvdXRbaV0gPSBlYWNoKGl0ZW0sIChiYWNrLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICBvcHMrKztcbiAgICAgICAgcmV0dXJuIChlcnIsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG91dFtpXSA9IGJhY2soZXJyLCB2YWx1ZSwgb3V0W2ldKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG9wcy0tO1xuICAgICAgICAgIGlmIChvcHMgPT09IDApIHtcbiAgICAgICAgICAgIHJlc29sdmUob3V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAob3BzID09PSAwKSB7XG4gICAgICByZXNvbHZlKG91dCk7XG4gICAgfVxuICB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBidWxrRnNUYXNrO1xuIl0sInNvdXJjZVJvb3QiOiIvVXNlcnMvdHlsZXJhcmJ1cy9kZXYvcHJvdmlkZXIvc3JjIn0=

'use strict';

const NormalModule = require('webpack/lib/NormalModule');

const cachePrefix = require('./util').cachePrefix;
const pluginCompat = require('./util/plugin-compat');

function wrapSource(source, methods) {
  Object.keys(methods).forEach(key => {
    const _method = source[key];
    source[key] = function (...args) {
      methods[key].apply(this, args);
      _method && _method.apply(this, args);
    };
  });
  return source;
}

function spyMethod(name, mods) {
  return function (...args) {
    mods.push([name].concat([].slice.call(args)));
  };
}

function isEqual(a, b) {
  if (Array.isArray(a) && Array.isArray(b) && a.length === b.length) {
    return a.reduce((carry, value, index) => carry && isEqual(value, b[index]), true);
  } else if (a === b) {
    return true;
  }
  return false;
}

class HardModuleConcatenationPlugin {
  apply(compiler) {
    let store;
    let freeze;

    pluginCompat.tap(compiler, '_hardSourceMethods', 'HardModuleConcatenationPlugin', methods => {
      store = methods.store;
      // fetch = methods.fetch;
      freeze = methods.freeze;
      // thaw = methods.thaw;
      // mapFreeze = methods.mapFreeze;
      // mapThaw = methods.mapThaw;
    });

    pluginCompat.tap(compiler, '_hardSourceFreezeModule', 'HardModuleConcatenationPlugin', (frozen, { modules }, extra) => {
      if (modules) {
        const compilation = extra.compilation;

        modules.forEach(module => {
          if ((module.cacheable || module.buildInfo && module.buildInfo.cacheable) && module instanceof NormalModule) {
            const identifierPrefix = cachePrefix(compilation);
            if (identifierPrefix === null) {
              return;
            }
            const identifier = identifierPrefix + module.identifier();

            store('Module', identifier, module, {
              id: identifier,
              compilation
            });
          }
        });
      }

      return frozen;
    });

    pluginCompat.tap(compiler, '_hardSourceAfterFreezeModule', 'HardModuleConcatenationPlugin', (frozen, module, { compilation }) => {
      return frozen;
      if (frozen && module.__hardSource_concatedSource) {
        const source = module.__hardSource_concatedSource;
        frozen.source = source.source();
        frozen.sourceMap = freeze('SourceMap', null, source, {
          module,
          compilation: compilation
        });
        frozen.concatenatedSourceMods = module.__hardSource_sourceMods;
      }
      return frozen;
    });
  }
}

module.exports = HardModuleConcatenationPlugin;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9UcmFuc2Zvcm1Db25jYXRlbmF0aW9uTW9kdWxlUGx1Z2luLmpzIl0sIm5hbWVzIjpbIk5vcm1hbE1vZHVsZSIsInJlcXVpcmUiLCJjYWNoZVByZWZpeCIsInBsdWdpbkNvbXBhdCIsIndyYXBTb3VyY2UiLCJzb3VyY2UiLCJtZXRob2RzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJfbWV0aG9kIiwiYXJncyIsImFwcGx5Iiwic3B5TWV0aG9kIiwibmFtZSIsIm1vZHMiLCJwdXNoIiwiY29uY2F0Iiwic2xpY2UiLCJjYWxsIiwiaXNFcXVhbCIsImEiLCJiIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwicmVkdWNlIiwiY2FycnkiLCJ2YWx1ZSIsImluZGV4IiwiSGFyZE1vZHVsZUNvbmNhdGVuYXRpb25QbHVnaW4iLCJjb21waWxlciIsInN0b3JlIiwiZnJlZXplIiwidGFwIiwiZnJvemVuIiwibW9kdWxlcyIsImV4dHJhIiwiY29tcGlsYXRpb24iLCJtb2R1bGUiLCJjYWNoZWFibGUiLCJidWlsZEluZm8iLCJpZGVudGlmaWVyUHJlZml4IiwiaWRlbnRpZmllciIsImlkIiwiX19oYXJkU291cmNlX2NvbmNhdGVkU291cmNlIiwic291cmNlTWFwIiwiY29uY2F0ZW5hdGVkU291cmNlTW9kcyIsIl9faGFyZFNvdXJjZV9zb3VyY2VNb2RzIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxlQUFlQyxRQUFRLDBCQUFSLENBQXJCOztBQUVBLE1BQU1DLGNBQWNELGtCQUFrQkMsV0FBdEM7QUFDQSxNQUFNQyxlQUFlRiwrQkFBckI7O0FBRUEsU0FBU0csVUFBVCxDQUFvQkMsTUFBcEIsRUFBNEJDLE9BQTVCLEVBQXFDO0FBQ25DQyxTQUFPQyxJQUFQLENBQVlGLE9BQVosRUFBcUJHLE9BQXJCLENBQTZCQyxPQUFPO0FBQ2xDLFVBQU1DLFVBQVVOLE9BQU9LLEdBQVAs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LEdBQW1CYixPQUFPLFdBQVAsRUFBb0IsSUFBcEIsRUFBMEI3QixNQUExQixFQUFrQztBQUNuRG1DLGdCQURtRDtBQUVuREQsdUJBQWFBO0FBRnNDLFNBQWxDLENBQW5CO0FBSUFILGVBQU9ZLHNCQUFQLEdBQWdDUixPQUFPUyx1QkFBdkM7QUFDRDtBQUNELGFBQU9iLE1BQVA7QUFDRCxLQWhCSDtBQWtCRDtBQXJFaUM7O0FBd0VwQ0ksT0FBT1UsT0FBUCxHQUFpQm5CLDZCQUFqQiIsImZpbGUiOiJoYXJkLXNvdXJjZS13ZWJwYWNrLXBsdWdpbi9saWIvVHJhbnNmb3JtQ29uY2F0ZW5hdGlvbk1vZHVsZVBsdWdpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE5vcm1hbE1vZHVsZSA9IHJlcXVpcmUoJ3dlYnBhY2svbGliL05vcm1hbE1vZHVsZScpO1xuXG5jb25zdCBjYWNoZVByZWZpeCA9IHJlcXVpcmUoJy4vdXRpbCcpLmNhY2hlUHJlZml4O1xuY29uc3QgcGx1Z2luQ29tcGF0ID0gcmVxdWlyZSgnLi91dGlsL3BsdWdpbi1jb21wYXQnKTtcblxuZnVuY3Rpb24gd3JhcFNvdXJjZShzb3VyY2UsIG1ldGhvZHMpIHtcbiAgT2JqZWN0LmtleXMobWV0aG9kcykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNvbnN0IF9tZXRob2QgPSBzb3VyY2Vba2V5XTtcbiAgICBzb3VyY2Vba2V5XSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgIG1ldGhvZHNba2V5XS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIF9tZXRob2QgJiYgX21ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHNvdXJjZTtcbn1cblxuZnVuY3Rpb24gc3B5TWV0aG9kKG5hbWUsIG1vZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBtb2RzLnB1c2goW25hbWVdLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3MpKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzRXF1YWwoYSwgYikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhKSAmJiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBhLnJlZHVjZShcbiAgICAgIChjYXJyeSwgdmFsdWUsIGluZGV4KSA9PiBjYXJyeSAmJiBpc0VxdWFsKHZhbHVlLCBiW2luZGV4XSksXG4gICAgICB0cnVlLFxuICAgICk7XG4gIH0gZWxzZSBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuY2xhc3MgSGFyZE1vZHVsZUNvbmNhdGVuYXRpb25QbHVnaW4ge1xuICBhcHBseShjb21waWxlcikge1xuICAgIGxldCBzdG9yZTtcbiAgICBsZXQgZnJlZXplO1xuXG4gICAgcGx1Z2luQ29tcGF0LnRhcChcbiAgICAgIGNvbXBpbGVyLFxuICAgICAgJ19oYXJkU291cmNlTWV0aG9kcycsXG4gICAgICAnSGFyZE1vZHVsZUNvbmNhdGVuYXRpb25QbHVnaW4nLFxuICAgICAgbWV0aG9kcyA9PiB7XG4gICAgICAgIHN0b3JlID0gbWV0aG9kcy5zdG9yZTtcbiAgICAgICAgLy8gZmV0Y2ggPSBtZXRob2RzLmZldGNoO1xuICAgICAgICBmcmVlemUgPSBtZXRob2RzLmZyZWV6ZTtcbiAgICAgICAgLy8gdGhhdyA9IG1ldGhvZHMudGhhdztcbiAgICAgICAgLy8gbWFwRnJlZXplID0gbWV0aG9kcy5tYXBGcmVlemU7XG4gICAgICAgIC8vIG1hcFRoYXcgPSBtZXRob2RzLm1hcFRoYXc7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICBwbHVnaW5Db21wYXQudGFwKFxuICAgICAgY29tcGlsZXIsXG4gICAgICAnX2hhcmRTb3VyY2VGcmVlemVNb2R1bGUnLFxuICAgICAgJ0hhcmRNb2R1bGVDb25jYXRlbmF0aW9uUGx1Z2luJyxcbiAgICAgIChmcm96ZW4sIHsgbW9kdWxlcyB9LCBleHRyYSkgPT4ge1xuICAgICAgICBpZiAobW9kdWxlcykge1xuICAgICAgICAgIGNvbnN0IGNvbXBpbGF0aW9uID0gZXh0cmEuY29tcGlsYXRpb247XG5cbiAgICAgICAgICBtb2R1bGVzLmZvckVhY2gobW9kdWxlID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgKG1vZHVsZS5jYWNoZWFibGUgfHxcbiAgICAgICAgICAgICAgICAobW9kdWxlLmJ1aWxkSW5mbyAmJiBtb2R1bGUuYnVpbGRJbmZvLmNhY2hlYWJsZSkpICYmXG4gICAgICAgICAgICAgIG1vZHVsZSBpbnN0YW5jZW9mIE5vcm1hbE1vZHVsZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGlkZW50aWZpZXJQcmVmaXggPSBjYWNoZVByZWZpeChjb21waWxhdGlvbik7XG4gICAgICAgICAgICAgIGlmIChpZGVudGlmaWVyUHJlZml4ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSBpZGVudGlmaWVyUHJlZml4ICsgbW9kdWxlLmlkZW50aWZpZXIoKTtcblxuICAgICAgICAgICAgICBzdG9yZSgnTW9kdWxlJywgaWRlbnRpZmllciwgbW9kdWxlLCB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkZW50aWZpZXIsXG4gICAgICAgICAgICAgICAgY29tcGlsYXRpb24sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZyb3plbjtcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIHBsdWdpbkNvbXBhdC50YXAoXG4gICAgICBjb21waWxlcixcbiAgICAgICdfaGFyZFNvdXJjZUFmdGVyRnJlZXplTW9kdWxlJyxcbiAgICAgICdIYXJkTW9kdWxlQ29uY2F0ZW5hdGlvblBsdWdpbicsXG4gICAgICAoZnJvemVuLCBtb2R1bGUsIHsgY29tcGlsYXRpb24gfSkgPT4ge1xuICAgICAgICByZXR1cm4gZnJvemVuO1xuICAgICAgICBpZiAoZnJvemVuICYmIG1vZHVsZS5fX2hhcmRTb3VyY2VfY29uY2F0ZWRTb3VyY2UpIHtcbiAgICAgICAgICBjb25zdCBzb3VyY2UgPSBtb2R1bGUuX19oYXJkU291cmNlX2NvbmNhdGVkU291cmNlO1xuICAgICAgICAgIGZyb3plbi5zb3VyY2UgPSBzb3VyY2Uuc291cmNlKCk7XG4gICAgICAgICAgZnJvemVuLnNvdXJjZU1hcCA9IGZyZWV6ZSgnU291cmNlTWFwJywgbnVsbCwgc291cmNlLCB7XG4gICAgICAgICAgICBtb2R1bGUsXG4gICAgICAgICAgICBjb21waWxhdGlvbjogY29tcGlsYXRpb24sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZnJvemVuLmNvbmNhdGVuYXRlZFNvdXJjZU1vZHMgPSBtb2R1bGUuX19oYXJkU291cmNlX3NvdXJjZU1vZHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyb3plbjtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhcmRNb2R1bGVDb25jYXRlbmF0aW9uUGx1Z2luO1xuIl0sInNvdXJjZVJvb3QiOiIvVXNlcnMvdHlsZXJhcmJ1cy9kZXYvcHJvdmlkZXIvc3JjIn0=

'use strict';

const pluginCompat = require('./util/plugin-compat');

function freezeDependency(dependency, extra, methods) {
  if (extra.schemas.map.has(dependency.constructor)) {
    return extra.schemas.map.get(dependency.constructor).freeze(dependency, dependency, extra, methods);
  }
  if (extra.schemas[dependency.constructor.name]) {
    return extra.schemas[dependency.constructor.name].freeze(dependency, dependency, extra, methods);
  }
}

function thawDependency(frozen, extra, methods) {
  if (extra.schemas[frozen.type]) {
    return extra.schemas[frozen.type].thaw(null, frozen, extra, methods);
  }
}

class TransformBasicDependencyPlugin {
  constructor(options) {
    this.options = options;
  }

  apply(compiler) {
    if (this.options.schema < 4) {
      const TransformBasicDependencyPluginLegacy = require('./TransformBasicDependencyPluginLegacy');
      new TransformBasicDependencyPluginLegacy(this.options).apply(compiler);
    } else {
      const schemas = require('./schema-4');

      let methods;

      pluginCompat.tap(compiler, '_hardSourceMethods', 'TransformBasicDependencyPlugin methods', _methods => {
        methods = _methods;
      });

      pluginCompat.tap(compiler, '_hardSourceFreezeDependency', 'TransformBasicDependencyPlugin freeze', (frozen, dependency, extra) => {
        extra.schemas = schemas;
        const _frozen = freezeDependency(dependency, extra, methods);
        if (_frozen) {
          return _frozen;
        }
        return frozen;
      });

      pluginCompat.tap(compiler, '_hardSourceThawDependency', 'TransformBasicDependencyPlugin', (dependency, frozen, extra) => {
        extra.schemas = schemas;
        const _thawed = thawDependency(frozen, extra, methods);
        if (_thawed) {
          return _thawed;
        }
        return dependency;
      });
    }
  }
}

module.exports = TransformBasicDependencyPlugin;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9UcmFuc2Zvcm1CYXNpY0RlcGVuZGVuY3lQbHVnaW4uanMiXSwibmFtZXMiOlsicGx1Z2luQ29tcGF0IiwicmVxdWlyZSIsImZyZWV6ZURlcGVuZGVuY3kiLCJkZXBlbmRlbmN5IiwiZXh0cmEiLCJtZXRob2RzIiwic2NoZW1hcyIsIm1hcCIsImhhcyIsImNvbnN0cnVjdG9yIiwiZ2V0IiwiZnJlZXplIiwibmFtZSIsInRoYXdEZXBlbmRlbmN5IiwiZnJvemVuIiwidHlwZSIsInRoYXciLCJUcmFuc2Zvcm1CYXNpY0RlcGVuZGVuY3lQbHVnaW4iLCJvcHRpb25zIiwiYXBwbHkiLCJjb21waWxlciIsInNjaGVtYSIsIlRyYW5zZm9ybUJhc2ljRGVwZW5kZW5jeVBsdWdpbkxlZ2FjeSIsInRhcCIsIl9tZXRob2RzIiwiX2Zyb3plbiIsIl90aGF3ZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLGVBQWVDLCtCQUFyQjs7QUFFQSxTQUFTQyxnQkFBVCxDQUEwQkMsVUFBMUIsRUFBc0NDLEtBQXRDLEVBQTZDQyxPQUE3QyxFQUFzRDtBQUNwRCxNQUFJRCxNQUFNRSxPQUFOLENBQWNDLEdBQWQsQ0FBa0JDLEdBQWxCLENBQXNCTCxXQUFXTSxXQUFqQyxDQUFKLEVBQW1EO0FBQ2pELFdBQU9MLE1BQU1FLE9BQU4sQ0FBY0MsR0FBZCxDQUNKRyxHQURJLENBQ0FQLFdBQVdNLFdBRFgsRUFFSkUsTUFGSSxDQUVHUixVQUZILEVBRWVBLFVBRmYsRUFFMkJDLEtBRjNCLEVBRWtDQyxPQUZsQyxDQUFQO0FBR0Q7QUFDRCxNQUFJRCxNQUFNRSxPQUFOLENBQWNILFdBQVdNLFdBQVgsQ0FBdUJHLElBQXJDLENBQUosRUFBZ0Q7QUFDOUMsV0FBT1IsTUFBTUUsT0FBTixDQUFjSCxXQUFXTSxXQUFYLENBQXVCRyxJQUFyQyxFQUEyQ0QsTUFBM0MsQ0FDTFIsVUFESyxFQUVMQSxVQUZLLEVBR0xDLEtBSEssRUFJTEMsT0FKSyxDQUFQO0FBTUQ7QUFDRjs7QUFFRCxTQUFTUSxjQUFULENBQXdCQyxNQUF4QixFQUFnQ1YsS0FBaEMsRUFBdUNDLE9BQXZDLEVBQWdEO0FBQzlDLE1BQUlELE1BQU1FLE9BQU4sQ0FBY1EsT0FBT0MsSUFBckIsQ0FBSixFQUFnQztBQUM5QixXQUFPWCxNQUFNRSxPQUFOLENBQWNRLE9BQU9DLElBQXJCLEVBQTJCQyxJQUEzQixDQUFnQyxJQUFoQyxFQUFzQ0YsTUFBdEMsRUFBOENWLEtBQTlDLEVBQXFEQyxPQUFyRCxDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxNQUFNWSw4QkFBTixDQUFxQztBQUNuQ1IsY0FBWVMsT0FBWixFQUFxQjtBQUNuQixTQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDRDs7QUFFREMsUUFBTUMsUUFBTixFQUFnQjtBQUNkLFFBQUksS0FBS0YsT0FBTCxDQUFhRyxNQUFiLEdBQXNCLENBQTFCLEVBQTZCO0FBQzNCLFlBQU1DLHVDQUF1Q3JCLGlEQUE3QztBQUNBLFVBQUlxQixvQ0FBSixDQUF5QyxLQUFLSixPQUE5QyxFQUF1REMsS0FBdkQsQ0FBNkRDLFFBQTdEO0FBQ0QsS0FIRCxNQUdPO0FBQ0wsWUFBTWQsVUFBVUwscUJBQWhCOztBQUVBLFVBQUlJLE9BQUo7O0FBRUFMLG1CQUFhdUIsR0FBYixDQUNFSCxRQURGLEVBRUUsb0JBRkYsRUFHRSx3Q0FIRixFQUlFSSxZQUFZO0FBQ1ZuQixrQkFBVW1CLFFBQVY7QUFDRCxPQU5IOztBQVNBeEIsbUJBQWF1QixHQUFiLENBQ0VILFFBREYsRUFFRSw2QkFGRixFQUdFLHVDQUhGLEVBSUUsQ0FBQ04sTUFBRCxFQUFTWCxVQUFULEVBQXFCQyxLQUFyQixLQUErQjtBQUM3QkEsY0FBTUUsT0FBTixHQUFnQkEsT0FBaEI7QUFDQSxjQUFNbUIsVUFBVXZCLGlCQUFpQkMsVUFBakIsRUFBNkJDLEtBQTdCLEVBQW9DQyxPQUFwQyxDQUFoQjtBQUNBLFlBQUlvQixPQUFKLEVBQWE7QUFDWCxpQkFBT0EsT0FBUDtBQUNEO0FBQ0QsZUFBT1gsTUFBUDtBQUNELE9BWEg7O0FBY0FkLG1CQUFhdUIsR0FBYixDQUNFSCxRQURGLEVBRUUsMkJBRkYsRUFHRSxnQ0FIRixFQUlFLENBQUNqQixVQUFELEVBQWFXLE1BQWIsRUFBcUJWLEtBQXJCLEtBQStCO0FBQzdCQSxjQUFNRSxPQUFOLEdBQWdCQSxPQUFoQjtBQUNBLGNBQU1vQixVQUFVYixlQUFlQyxNQUFmLEVBQXVCVixLQUF2QixFQUE4QkMsT0FBOUIsQ0FBaEI7QUFDQSxZQUFJcUIsT0FBSixFQUFhO0FBQ1gsaUJBQU9BLE9BQVA7QUFDRDtBQUNELGVBQU92QixVQUFQO0FBQ0QsT0FYSDtBQWFEO0FBQ0Y7QUFuRGtDOztBQXNEckN3QixPQUFPQyxPQUFQLEdBQWlCWCw4QkFBakIiLCJmaWxlIjoiaGFyZC1zb3VyY2Utd2VicGFjay1wbHVnaW4vbGliL1RyYW5zZm9ybUJhc2ljRGVwZW5kZW5jeVBsdWdpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBsdWdpbkNvbXBhdCA9IHJlcXVpcmUoJy4vdXRpbC9wbHVnaW4tY29tcGF0Jyk7XG5cbmZ1bmN0aW9uIGZyZWV6ZURlcGVuZGVuY3koZGVwZW5kZW5jeSwgZXh0cmEsIG1ldGhvZHMpIHtcbiAgaWYgKGV4dHJhLnNjaGVtYXMubWFwLmhhcyhkZXBlbmRlbmN5LmNvbnN0cnVjdG9yKSkge1xuICAgIHJldHVybiBleHRyYS5zY2hlbWFzLm1hcFxuICAgICAgLmdldChkZXBlbmRlbmN5LmNvbnN0cnVjdG9yKVxuICAgICAgLmZyZWV6ZShkZXBlbmRlbmN5LCBkZXBlbmRlbmN5LCBleHRyYSwgbWV0aG9kcyk7XG4gIH1cbiAgaWYgKGV4dHJhLnNjaGVtYXNbZGVwZW5kZW5jeS5jb25zdHJ1Y3Rvci5uYW1lXSkge1xuICAgIHJldHVybiBleHRyYS5zY2hlbWFzW2RlcGVuZGVuY3kuY29uc3RydWN0b3IubmFtZV0uZnJlZXplKFxuICAgICAgZGVwZW5kZW5jeSxcbiAgICAgIGRlcGVuZGVuY3ksXG4gICAgICBleHRyYSxcbiAgICAgIG1ldGhvZHMsXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aGF3RGVwZW5kZW5jeShmcm96ZW4sIGV4dHJhLCBtZXRob2RzKSB7XG4gIGlmIChleHRyYS5zY2hlbWFzW2Zyb3plbi50eXBlXSkge1xuICAgIHJldHVybiBleHRyYS5zY2hlbWFzW2Zyb3plbi50eXBlXS50aGF3KG51bGwsIGZyb3plbiwgZXh0cmEsIG1ldGhvZHMpO1xuICB9XG59XG5cbmNsYXNzIFRyYW5zZm9ybUJhc2ljRGVwZW5kZW5jeVBsdWdpbiB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgYXBwbHkoY29tcGlsZXIpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnNjaGVtYSA8IDQpIHtcbiAgICAgIGNvbnN0IFRyYW5zZm9ybUJhc2ljRGVwZW5kZW5jeVBsdWdpbkxlZ2FjeSA9IHJlcXVpcmUoJy4vVHJhbnNmb3JtQmFzaWNEZXBlbmRlbmN5UGx1Z2luTGVnYWN5Jyk7XG4gICAgICBuZXcgVHJhbnNmb3JtQmFzaWNEZXBlbmRlbmN5UGx1Z2luTGVnYWN5KHRoaXMub3B0aW9ucykuYXBwbHkoY29tcGlsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzY2hlbWFzID0gcmVxdWlyZSgnLi9zY2hlbWEtNCcpO1xuXG4gICAgICBsZXQgbWV0aG9kcztcblxuICAgICAgcGx1Z2luQ29tcGF0LnRhcChcbiAgICAgICAgY29tcGlsZXIsXG4gICAgICAgICdfaGFyZFNvdXJjZU1ldGhvZHMnLFxuICAgICAgICAnVHJhbnNmb3JtQmFzaWNEZXBlbmRlbmN5UGx1Z2luIG1ldGhvZHMnLFxuICAgICAgICBfbWV0aG9kcyA9PiB7XG4gICAgICAgICAgbWV0aG9kcyA9IF9tZXRob2RzO1xuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgICAgcGx1Z2luQ29tcGF0LnRhcChcbiAgICAgICAgY29tcGlsZXIsXG4gICAgICAgICdfaGFyZFNvdXJjZUZyZWV6ZURlcGVuZGVuY3knLFxuICAgICAgICAnVHJhbnNmb3JtQmFzaWNEZXBlbmRlbmN5UGx1Z2luIGZyZWV6ZScsXG4gICAgICAgIChmcm96ZW4sIGRlcGVuZGVuY3ksIGV4dHJhKSA9PiB7XG4gICAgICAgICAgZXh0cmEuc2NoZW1hcyA9IHNjaGVtYXM7XG4gICAgICAgICAgY29uc3QgX2Zyb3plbiA9IGZyZWV6ZURlcGVuZGVuY3koZGVwZW5kZW5jeSwgZXh0cmEsIG1ldGhvZHMpO1xuICAgICAgICAgIGlmIChfZnJvemVuKSB7XG4gICAgICAgICAgICByZXR1cm4gX2Zyb3plbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZyb3plbjtcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICAgIHBsdWdpbkNvbXBhdC50YXAoXG4gICAgICAgIGNvbXBpbGVyLFxuICAgICAgICAnX2hhcmRTb3VyY2VUaGF3RGVwZW5kZW5jeScsXG4gICAgICAgICdUcmFuc2Zvcm1CYXNpY0RlcGVuZGVuY3lQbHVnaW4nLFxuICAgICAgICAoZGVwZW5kZW5jeSwgZnJvemVuLCBleHRyYSkgPT4ge1xuICAgICAgICAgIGV4dHJhLnNjaGVtYXMgPSBzY2hlbWFzO1xuICAgICAgICAgIGNvbnN0IF90aGF3ZWQgPSB0aGF3RGVwZW5kZW5jeShmcm96ZW4sIGV4dHJhLCBtZXRob2RzKTtcbiAgICAgICAgICBpZiAoX3RoYXdlZCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGF3ZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkZXBlbmRlbmN5O1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm1CYXNpY0RlcGVuZGVuY3lQbHVnaW47XG4iXSwic291cmNlUm9vdCI6Ii9Vc2Vycy90eWxlcmFyYnVzL2Rldi9wcm92aWRlci9zcmMifQ==

'use strict';

require('source-map-support/register');

const pluginCompat = require('./util/plugin-compat');

function freezeDependency(dependency, extra, methods) {
  if (extra.schemas.map.has(dependency.constructor)) {
    return extra.schemas.map.get(dependency.constructor).freeze(dependency, dependency, extra, methods);
  }
  if (extra.schemas[dependency.constructor.name]) {
    return extra.schemas[dependency.constructor.name].freeze(dependency, dependency, extra, methods);
  }
}

function thawDependency(frozen, extra, methods) {
  if (extra.schemas[frozen.type]) {
    return extra.schemas[frozen.type].thaw(null, frozen, extra, methods);
  }
}

class TransformBasicDependencyPlugin {
  constructor(options) {
    this.options = options;
  }

  apply(compiler) {
    if (this.options.schema < 4) {
      const TransformBasicDependencyPluginLegacy = require('./TransformBasicDependencyPluginLegacy');
      new TransformBasicDependencyPluginLegacy(this.options).apply(compiler);
    } else {
      const schemas = require('./schema-4');

      let methods;

      pluginCompat.tap(compiler, '_hardSourceMethods', 'TransformBasicDependencyPlugin methods', _methods => {
        methods = _methods;
      });

      pluginCompat.tap(compiler, '_hardSourceFreezeDependency', 'TransformBasicDependencyPlugin freeze', (frozen, dependency, extra) => {
        extra.schemas = schemas;
        const _frozen = freezeDependency(dependency, extra, methods);
        if (_frozen) {
          return _frozen;
        }
        return frozen;
      });

      pluginCompat.tap(compiler, '_hardSourceThawDependency', 'TransformBasicDependencyPlugin', (dependency, frozen, extra) => {
        extra.schemas = schemas;
        const _thawed = thawDependency(frozen, extra, methods);
        if (_thawed) {
          return _thawed;
        }
        return dependency;
      });
    }
  }
}

module.exports = TransformBasicDependencyPlugin;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9UcmFuc2Zvcm1CYXNpY0RlcGVuZGVuY3lQbHVnaW4uanMiXSwibmFtZXMiOlsicGx1Z2luQ29tcGF0IiwicmVxdWlyZSIsImZyZWV6ZURlcGVuZGVuY3kiLCJkZXBlbmRlbmN5IiwiZXh0cmEiLCJtZXRob2RzIiwic2NoZW1hcyIsIm1hcCIsImhhcyIsImNvbnN0cnVjdG9yIiwiZ2V0IiwiZnJlZXplIiwibmFtZSIsInRoYXdEZXBlbmRlbmN5IiwiZnJvemVuIiwidHlwZSIsInRoYXciLCJUcmFuc2Zvcm1CYXNpY0RlcGVuZGVuY3lQbHVnaW4iLCJvcHRpb25zIiwiYXBwbHkiLCJjb21waWxlciIsInNjaGVtYSIsIlRyYW5zZm9ybUJhc2ljRGVwZW5kZW5jeVBsdWdpbkxlZ2FjeSIsInRhcCIsIl9tZXRob2RzIiwiX2Zyb3plbiIsIl90aGF3ZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsZUFBZUMsUUFBUSxzQkFBUixDQUFyQjs7QUFFQSxTQUFTQyxnQkFBVCxDQUEwQkMsVUFBMUIsRUFBc0NDLEtBQXRDLEVBQTZDQyxPQUE3QyxFQUFzRDtBQUNwRCxNQUFJRCxNQUFNRSxPQUFOLENBQWNDLEdBQWQsQ0FBa0JDLEdBQWxCLENBQXNCTCxXQUFXTSxXQUFqQyxDQUFKLEVBQW1EO0FBQ2pELFdBQU9MLE1BQU1FLE9BQU4sQ0FBY0MsR0FBZCxDQUNKRyxHQURJLENBQ0FQLFdBQVdNLFdBRFgsRUFFSkUsTUFGSSxDQUVHUixVQUZILEVBRWVBLFVBRmYsRUFFMkJDLEtBRjNCLEVBRWtDQyxPQUZsQyxDQUFQO0FBR0Q7QUFDRCxNQUFJRCxNQUFNRSxPQUFOLENBQWNILFdBQVdNLFdBQVgsQ0FBdUJHLElBQXJDLENBQUosRUFBZ0Q7QUFDOUMsV0FBT1IsTUFBTUUsT0FBTixDQUFjSCxXQUFXTSxXQUFYLENBQXVCRyxJQUFyQyxFQUEyQ0QsTUFBM0MsQ0FDTFIsVUFESyxFQUVMQSxVQUZLLEVBR0xDLEtBSEssRUFJTEMsT0FKSyxDQUFQO0FBTUQ7QUFDRjs7QUFFRCxTQUFTUSxjQUFULENBQXdCQyxNQUF4QixFQUFnQ1YsS0FBaEMsRUFBdUNDLE9BQXZDLEVBQWdEO0FBQzlDLE1BQUlELE1BQU1FLE9BQU4sQ0FBY1EsT0FBT0MsSUFBckIsQ0FBSixFQUFnQztBQUM5QixXQUFPWCxNQUFNRSxPQUFOLENBQWNRLE9BQU9DLElBQXJCLEVBQTJCQyxJQUEzQixDQUFnQyxJQUFoQyxFQUFzQ0YsTUFBdEMsRUFBOENWLEtBQTlDLEVBQXFEQyxPQUFyRCxDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxNQUFNWSw4QkFBTixDQUFxQztBQUNuQ1IsY0FBWVMsT0FBWixFQUFxQjtBQUNuQixTQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDRDs7QUFFREMsUUFBTUMsUUFBTixFQUFnQjtBQUNkLFFBQUksS0FBS0YsT0FBTCxDQUFhRyxNQUFiLEdBQXNCLENBQTFCLEVBQTZCO0FBQzNCLFlBQU1DLHVDQUF1Q3JCLFFBQVEsd0NBQVIsQ0FBN0M7QUFDQSxVQUFJcUIsb0NBQUosQ0FBeUMsS0FBS0osT0FBOUMsRUFBdURDLEtBQXZELENBQTZEQyxRQUE3RDtBQUNELEtBSEQsTUFHTztBQUNMLFlBQU1kLFVBQVVMLFFBQVEsWUFBUixDQUFoQjs7QUFFQSxVQUFJSSxPQUFKOztBQUVBTCxtQkFBYXVCLEdBQWIsQ0FDRUgsUUFERixFQUVFLG9CQUZGLEVBR0Usd0NBSEYsRUFJRUksWUFBWTtBQUNWbkIsa0JBQVVtQixRQUFWO0FBQ0QsT0FOSDs7QUFTQXhCLG1CQUFhdUIsR0FBYixDQUNFSCxRQURGLEVBRUUsNkJBRkYsRUFHRSx1Q0FIRixFQUlFLENBQUNOLE1BQUQsRUFBU1gsVUFBVCxFQUFxQkMsS0FBckIsS0FBK0I7QUFDN0JBLGNBQU1FLE9BQU4sR0FBZ0JBLE9BQWhCO0FBQ0EsY0FBTW1CLFVBQVV2QixpQkFBaUJDLFVBQWpCLEVBQTZCQyxLQUE3QixFQUFvQ0MsT0FBcEMsQ0FBaEI7QUFDQSxZQUFJb0IsT0FBSixFQUFhO0FBQ1gsaUJBQU9BLE9BQVA7QUFDRDtBQUNELGVBQU9YLE1BQVA7QUFDRCxPQVhIOztBQWNBZCxtQkFBYXVCLEdBQWIsQ0FDRUgsUUFERixFQUVFLDJCQUZGLEVBR0UsZ0NBSEYsRUFJRSxDQUFDakIsVUFBRCxFQUFhVyxNQUFiLEVBQXFCVixLQUFyQixLQUErQjtBQUM3QkEsY0FBTUUsT0FBTixHQUFnQkEsT0FBaEI7QUFDQSxjQUFNb0IsVUFBVWIsZUFBZUMsTUFBZixFQUF1QlYsS0FBdkIsRUFBOEJDLE9BQTlCLENBQWhCO0FBQ0EsWUFBSXFCLE9BQUosRUFBYTtBQUNYLGlCQUFPQSxPQUFQO0FBQ0Q7QUFDRCxlQUFPdkIsVUFBUDtBQUNELE9BWEg7QUFhRDtBQUNGO0FBbkRrQzs7QUFzRHJDd0IsT0FBT0MsT0FBUCxHQUFpQlgsOEJBQWpCIiwiZmlsZSI6ImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9UcmFuc2Zvcm1CYXNpY0RlcGVuZGVuY3lQbHVnaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwbHVnaW5Db21wYXQgPSByZXF1aXJlKCcuL3V0aWwvcGx1Z2luLWNvbXBhdCcpO1xuXG5mdW5jdGlvbiBmcmVlemVEZXBlbmRlbmN5KGRlcGVuZGVuY3ksIGV4dHJhLCBtZXRob2RzKSB7XG4gIGlmIChleHRyYS5zY2hlbWFzLm1hcC5oYXMoZGVwZW5kZW5jeS5jb25zdHJ1Y3RvcikpIHtcbiAgICByZXR1cm4gZXh0cmEuc2NoZW1hcy5tYXBcbiAgICAgIC5nZXQoZGVwZW5kZW5jeS5jb25zdHJ1Y3RvcilcbiAgICAgIC5mcmVlemUoZGVwZW5kZW5jeSwgZGVwZW5kZW5jeSwgZXh0cmEsIG1ldGhvZHMpO1xuICB9XG4gIGlmIChleHRyYS5zY2hlbWFzW2RlcGVuZGVuY3kuY29uc3RydWN0b3IubmFtZV0pIHtcbiAgICByZXR1cm4gZXh0cmEuc2NoZW1hc1tkZXBlbmRlbmN5LmNvbnN0cnVjdG9yLm5hbWVdLmZyZWV6ZShcbiAgICAgIGRlcGVuZGVuY3ksXG4gICAgICBkZXBlbmRlbmN5LFxuICAgICAgZXh0cmEsXG4gICAgICBtZXRob2RzLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGhhd0RlcGVuZGVuY3koZnJvemVuLCBleHRyYSwgbWV0aG9kcykge1xuICBpZiAoZXh0cmEuc2NoZW1hc1tmcm96ZW4udHlwZV0pIHtcbiAgICByZXR1cm4gZXh0cmEuc2NoZW1hc1tmcm96ZW4udHlwZV0udGhhdyhudWxsLCBmcm96ZW4sIGV4dHJhLCBtZXRob2RzKTtcbiAgfVxufVxuXG5jbGFzcyBUcmFuc2Zvcm1CYXNpY0RlcGVuZGVuY3lQbHVnaW4ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIGFwcGx5KGNvbXBpbGVyKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zY2hlbWEgPCA0KSB7XG4gICAgICBjb25zdCBUcmFuc2Zvcm1CYXNpY0RlcGVuZGVuY3lQbHVnaW5MZWdhY3kgPSByZXF1aXJlKCcuL1RyYW5zZm9ybUJhc2ljRGVwZW5kZW5jeVBsdWdpbkxlZ2FjeScpO1xuICAgICAgbmV3IFRyYW5zZm9ybUJhc2ljRGVwZW5kZW5jeVBsdWdpbkxlZ2FjeSh0aGlzLm9wdGlvbnMpLmFwcGx5KGNvbXBpbGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2NoZW1hcyA9IHJlcXVpcmUoJy4vc2NoZW1hLTQnKTtcblxuICAgICAgbGV0IG1ldGhvZHM7XG5cbiAgICAgIHBsdWdpbkNvbXBhdC50YXAoXG4gICAgICAgIGNvbXBpbGVyLFxuICAgICAgICAnX2hhcmRTb3VyY2VNZXRob2RzJyxcbiAgICAgICAgJ1RyYW5zZm9ybUJhc2ljRGVwZW5kZW5jeVBsdWdpbiBtZXRob2RzJyxcbiAgICAgICAgX21ldGhvZHMgPT4ge1xuICAgICAgICAgIG1ldGhvZHMgPSBfbWV0aG9kcztcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICAgIHBsdWdpbkNvbXBhdC50YXAoXG4gICAgICAgIGNvbXBpbGVyLFxuICAgICAgICAnX2hhcmRTb3VyY2VGcmVlemVEZXBlbmRlbmN5JyxcbiAgICAgICAgJ1RyYW5zZm9ybUJhc2ljRGVwZW5kZW5jeVBsdWdpbiBmcmVlemUnLFxuICAgICAgICAoZnJvemVuLCBkZXBlbmRlbmN5LCBleHRyYSkgPT4ge1xuICAgICAgICAgIGV4dHJhLnNjaGVtYXMgPSBzY2hlbWFzO1xuICAgICAgICAgIGNvbnN0IF9mcm96ZW4gPSBmcmVlemVEZXBlbmRlbmN5KGRlcGVuZGVuY3ksIGV4dHJhLCBtZXRob2RzKTtcbiAgICAgICAgICBpZiAoX2Zyb3plbikge1xuICAgICAgICAgICAgcmV0dXJuIF9mcm96ZW47XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmcm96ZW47XG4gICAgICAgIH0sXG4gICAgICApO1xuXG4gICAgICBwbHVnaW5Db21wYXQudGFwKFxuICAgICAgICBjb21waWxlcixcbiAgICAgICAgJ19oYXJkU291cmNlVGhhd0RlcGVuZGVuY3knLFxuICAgICAgICAnVHJhbnNmb3JtQmFzaWNEZXBlbmRlbmN5UGx1Z2luJyxcbiAgICAgICAgKGRlcGVuZGVuY3ksIGZyb3plbiwgZXh0cmEpID0+IHtcbiAgICAgICAgICBleHRyYS5zY2hlbWFzID0gc2NoZW1hcztcbiAgICAgICAgICBjb25zdCBfdGhhd2VkID0gdGhhd0RlcGVuZGVuY3koZnJvemVuLCBleHRyYSwgbWV0aG9kcyk7XG4gICAgICAgICAgaWYgKF90aGF3ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhhd2VkO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGVwZW5kZW5jeTtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtQmFzaWNEZXBlbmRlbmN5UGx1Z2luO1xuIl0sInNvdXJjZVJvb3QiOiIvVXNlcnMvdHlsZXJhcmJ1cy9kZXYvcHJvdmlkZXIvc3JjIn0=

'use strict';

require('source-map-support/register');

const _level = require('level');

const promisify = require('./util/promisify');

const level = promisify(_level);

class LevelDbSerializer {
  constructor({ cacheDirPath }) {
    this.path = cacheDirPath;
    this.leveldbLock = Promise.resolve();
  }

  read() {
    const start = Date.now();
    const moduleCache = {};
    return level(this.path).then(db => new Promise((resolve, reject) => {
      const dbClose = promisify(db.close, { context: db });
      db.createReadStream().on('data', data => {
        const value = data.value;
        if (!moduleCache[data.key]) {
          moduleCache[data.key] = value;
        }
      }).on('end', () => {
        dbClose().then(resolve, reject);
      });
    })).then(() => moduleCache);
  }

  write(moduleOps) {
    const ops = moduleOps;

    if (ops.length === 0) {
      return Promise.resolve();
    }

    for (let i = 0; i < ops.length; i++) {
      if (ops[i].value === null) {
        ops[i].type = 'delete';
      } else {
        if (typeof ops[i].value !== 'string') {
          ops[i].value = JSON.stringify(ops[i].value);
        }
        ops[i].type = 'put';
      }
    }

    const cachePath = this.path;

    return this.leveldbLock = this.leveldbLock.then(() => level(cachePath)).then(db => promisify(db.batch, { context: db })(ops).then(() => db)).then(db => promisify(db.close, { context: db })());
  }
}

module.exports = LevelDbSerializer;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9TZXJpYWxpemVyTGV2ZWxkYi5qcyJdLCJuYW1lcyI6WyJfbGV2ZWwiLCJyZXF1aXJlIiwicHJvbWlzaWZ5IiwibGV2ZWwiLCJMZXZlbERiU2VyaWFsaXplciIsImNvbnN0cnVjdG9yIiwiY2FjaGVEaXJQYXRoIiwicGF0aCIsImxldmVsZGJMb2NrIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWFkIiwic3RhcnQiLCJEYXRlIiwibm93IiwibW9kdWxlQ2FjaGUiLCJ0aGVuIiwiZGIiLCJyZWplY3QiLCJkYkNsb3NlIiwiY2xvc2UiLCJjb250ZXh0IiwiY3JlYXRlUmVhZFN0cmVhbSIsIm9uIiwiZGF0YSIsInZhbHVlIiwia2V5Iiwid3JpdGUiLCJtb2R1bGVPcHMiLCJvcHMiLCJsZW5ndGgiLCJpIiwidHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjYWNoZVBhdGgiLCJiYXRjaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxTQUFTQyxRQUFRLE9BQVIsQ0FBZjs7QUFFQSxNQUFNQyxZQUFZRCxRQUFRLGtCQUFSLENBQWxCOztBQUVBLE1BQU1FLFFBQVFELFVBQVVGLE1BQVYsQ0FBZDs7QUFFQSxNQUFNSSxpQkFBTixDQUF3QjtBQUN0QkMsY0FBWSxFQUFFQyxZQUFGLEVBQVosRUFBOEI7QUFDNUIsU0FBS0MsSUFBTCxHQUFZRCxZQUFaO0FBQ0EsU0FBS0UsV0FBTCxHQUFtQkMsUUFBUUMsT0FBUixFQUFuQjtBQUNEOztBQUVEQyxTQUFPO0FBQ0wsVUFBTUMsUUFBUUMsS0FBS0MsR0FBTCxFQUFkO0FBQ0EsVUFBTUMsY0FBYyxFQUFwQjtBQUNBLFdBQU9aLE1BQU0sS0FBS0ksSUFBWCxFQUNKUyxJQURJLENBRUhDLE1BQ0UsSUFBSVIsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVVEsTUFBVixLQUFxQjtBQUMvQixZQUFNQyxVQUFVakIsVUFBVWUsR0FBR0csS0FBYixFQUFvQixFQUFFQyxTQUFTSixFQUFYLEVBQXBCLENBQWhCO0FBQ0FBLFNBQUdLLGdCQUFILEdBQ0dDLEVBREgsQ0FDTSxNQUROLEVBQ2NDLFFBQVE7QUFDbEIsY0FBTUMsUUFBUUQsS0FBS0MsS0FBbkI7QUFDQSxZQUFJLENBQUNWLFlBQVlTLEtBQUtFLEdBQWpCLENBQUwsRUFBNEI7QUFDMUJYLHNCQUFZUyxLQUFLRSxHQUFqQixJQUF3QkQsS0FBeEI7QUFDRDtBQUNGLE9BTkgsRUFPR0YsRUFQSCxDQU9NLEtBUE4sRUFPYSxNQUFNO0FBQ2ZKLGtCQUFVSCxJQUFWLENBQWVOLE9BQWYsRUFBd0JRLE1BQXhCO0FBQ0QsT0FUSDtBQVVELEtBWkQsQ0FIQyxFQWlCSkYsSUFqQkksQ0FpQkMsTUFBTUQsV0FqQlAsQ0FBUDtBQWtCRDs7QUFFRFksUUFBTUMsU0FBTixFQUFpQjtBQUNmLFVBQU1DLE1BQU1ELFNBQVo7O0FBRUEsUUFBSUMsSUFBSUMsTUFBSixLQUFlLENBQW5CLEVBQXNCO0FBQ3BCLGFBQU9yQixRQUFRQyxPQUFSLEVBQVA7QUFDRDs7QUFFRCxTQUFLLElBQUlxQixJQUFJLENBQWIsRUFBZ0JBLElBQUlGLElBQUlDLE1BQXhCLEVBQWdDQyxHQUFoQyxFQUFxQztBQUNuQyxVQUFJRixJQUFJRSxDQUFKLEVBQU9OLEtBQVAsS0FBaUIsSUFBckIsRUFBMkI7QUFDekJJLFlBQUlFLENBQUosRUFBT0MsSUFBUCxHQUFjLFFBQWQ7QUFDRCxPQUZELE1BRU87QUFDTCxZQUFJLE9BQU9ILElBQUlFLENBQUosRUFBT04sS0FBZCxLQUF3QixRQUE1QixFQUFzQztBQUNwQ0ksY0FBSUUsQ0FBSixFQUFPTixLQUFQLEdBQWVRLEtBQUtDLFNBQUwsQ0FBZUwsSUFBSUUsQ0FBSixFQUFPTixLQUF0QixDQUFmO0FBQ0Q7QUFDREksWUFBSUUsQ0FBSixFQUFPQyxJQUFQLEdBQWMsS0FBZDtBQUNEO0FBQ0Y7O0FBRUQsVUFBTUcsWUFBWSxLQUFLNUIsSUFBdkI7O0FBRUEsV0FBUSxLQUFLQyxXQUFMLEdBQW1CLEtBQUtBLFdBQUwsQ0FDeEJRLElBRHdCLENBQ25CLE1BQU1iLE1BQU1nQyxTQUFOLENBRGEsRUFFeEJuQixJQUZ3QixDQUVuQkMsTUFBTWYsVUFBVWUsR0FBR21CLEtBQWIsRUFBb0IsRUFBRWYsU0FBU0osRUFBWCxFQUFwQixFQUFxQ1ksR0FBckMsRUFBMENiLElBQTFDLENBQStDLE1BQU1DLEVBQXJELENBRmEsRUFHeEJELElBSHdCLENBR25CQyxNQUFNZixVQUFVZSxHQUFHRyxLQUFiLEVBQW9CLEVBQUVDLFNBQVNKLEVBQVgsRUFBcEIsR0FIYSxDQUEzQjtBQUlEO0FBckRxQjs7QUF3RHhCb0IsT0FBT0MsT0FBUCxHQUFpQmxDLGlCQUFqQiIsImZpbGUiOiJoYXJkLXNvdXJjZS13ZWJwYWNrLXBsdWdpbi9saWIvU2VyaWFsaXplckxldmVsZGIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfbGV2ZWwgPSByZXF1aXJlKCdsZXZlbCcpO1xuXG5jb25zdCBwcm9taXNpZnkgPSByZXF1aXJlKCcuL3V0aWwvcHJvbWlzaWZ5Jyk7XG5cbmNvbnN0IGxldmVsID0gcHJvbWlzaWZ5KF9sZXZlbCk7XG5cbmNsYXNzIExldmVsRGJTZXJpYWxpemVyIHtcbiAgY29uc3RydWN0b3IoeyBjYWNoZURpclBhdGggfSkge1xuICAgIHRoaXMucGF0aCA9IGNhY2hlRGlyUGF0aDtcbiAgICB0aGlzLmxldmVsZGJMb2NrID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICByZWFkKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBtb2R1bGVDYWNoZSA9IHt9O1xuICAgIHJldHVybiBsZXZlbCh0aGlzLnBhdGgpXG4gICAgICAudGhlbihcbiAgICAgICAgZGIgPT5cbiAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYkNsb3NlID0gcHJvbWlzaWZ5KGRiLmNsb3NlLCB7IGNvbnRleHQ6IGRiIH0pO1xuICAgICAgICAgICAgZGIuY3JlYXRlUmVhZFN0cmVhbSgpXG4gICAgICAgICAgICAgIC5vbignZGF0YScsIGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIW1vZHVsZUNhY2hlW2RhdGEua2V5XSkge1xuICAgICAgICAgICAgICAgICAgbW9kdWxlQ2FjaGVbZGF0YS5rZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBkYkNsb3NlKCkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSxcbiAgICAgIClcbiAgICAgIC50aGVuKCgpID0+IG1vZHVsZUNhY2hlKTtcbiAgfVxuXG4gIHdyaXRlKG1vZHVsZU9wcykge1xuICAgIGNvbnN0IG9wcyA9IG1vZHVsZU9wcztcblxuICAgIGlmIChvcHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChvcHNbaV0udmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgb3BzW2ldLnR5cGUgPSAnZGVsZXRlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3BzW2ldLnZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIG9wc1tpXS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KG9wc1tpXS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgb3BzW2ldLnR5cGUgPSAncHV0JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjYWNoZVBhdGggPSB0aGlzLnBhdGg7XG5cbiAgICByZXR1cm4gKHRoaXMubGV2ZWxkYkxvY2sgPSB0aGlzLmxldmVsZGJMb2NrXG4gICAgICAudGhlbigoKSA9PiBsZXZlbChjYWNoZVBhdGgpKVxuICAgICAgLnRoZW4oZGIgPT4gcHJvbWlzaWZ5KGRiLmJhdGNoLCB7IGNvbnRleHQ6IGRiIH0pKG9wcykudGhlbigoKSA9PiBkYikpXG4gICAgICAudGhlbihkYiA9PiBwcm9taXNpZnkoZGIuY2xvc2UsIHsgY29udGV4dDogZGIgfSkoKSkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGV2ZWxEYlNlcmlhbGl6ZXI7XG4iXSwic291cmNlUm9vdCI6Ii9Vc2Vycy90eWxlcmFyYnVzL2Rldi9wcm92aWRlci9zcmMifQ==

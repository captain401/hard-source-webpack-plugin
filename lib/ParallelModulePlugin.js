'use strict';

const { fork: cpFork } = require('child_process');
const { cpus } = require('os');
const { resolve } = require('path');

const logMessages = require('./util/log-messages');
const pluginCompat = require('./util/plugin-compat');

const webpackBin = () => {
  try {
    return require.resolve('webpack-cli');
  } catch (e) {}
  try {
    return require.resolve('webpack-command');
  } catch (e) {}
  throw new Error('webpack cli tool not installed or discoverable');
};

const configPath = compiler => {
  try {
    return require.resolve(resolve(compiler.options.context || process.cwd(), 'webpack.config'));
  } catch (e) {}
  try {
    return require.resolve(resolve(process.cwd(), 'webpack.config'));
  } catch (e) {}
  throw new Error('config not in obvious location');
};

class ParallelModulePlugin {
  constructor(options) {
    this.options = options;
  }

  apply(compiler) {
    try {
      require('webpack/lib/JavascriptGenerator');
    } catch (e) {
      logMessages.parallelRequireWebpack4(compiler);
      return;
    }

    const options = this.options || {};
    const fork = options.fork || ((fork, compiler, webpackBin) => fork(webpackBin(compiler), ['--config', configPath(compiler)], {
      silent: true
    }));
    const numWorkers = options.numWorkers ? typeof options.numWorkers === 'function' ? options.numWorkers : () => options.numWorkers : () => cpus().length;
    const minModules = typeof options.minModules === 'number' ? options.minModules : 10;

    const compilerHooks = pluginCompat.hooks(compiler);

    let freeze, thaw;

    compilerHooks._hardSourceMethods.tap('ParallelModulePlugin', methods => {
      freeze = methods.freeze;
      thaw = methods.thaw;
    });

    compilerHooks.thisCompilation.tap('ParallelModulePlugin', (compilation, params) => {
      const compilationHooks = pluginCompat.hooks(compilation);
      const nmfHooks = pluginCompat.hooks(params.normalModuleFactory);

      const doMaster = () => {
        const jobs = {};
        const readyJobs = {};
        const workers = [];

        let nextWorkerIndex = 0;

        let start = 0;
        let started = false;
        let configMismatch = false;

        let modules = 0;

        const startWorkers = () => {
          const _numWorkers = numWorkers();
          logMessages.parallelStartWorkers(compiler, {
            numWorkers: _numWorkers
          });

          for (let i = 0; i < _numWorkers; i++) {
            const worker = fork(cpFork, compiler, webpackBin);
            workers.push(worker);
            worker.on('message', _result => {
              if (configMismatch) {
                return;
              }

              if (_result.startsWith('ready:')) {
                const configHash = _result.split(':')[1];
                if (configHash !== compiler.__hardSource_configHash) {
                  logMessages.parallelConfigMismatch(compiler, {
                    outHash: compiler.__hardSource_configHash,
                    theirHash: configHash
                  });

                  configMismatch = true;
                  killWorkers();
                  for (const id in jobs) {
                    jobs[id].cb({ error: true });
                    delete readyJobs[id];
                    delete jobs[id];
                  }
                  return;
                }
              }

              if (Object.values(readyJobs).length) {
                const id = Object.keys(readyJobs)[0];
                worker.send(JSON.stringify({
                  id,
                  data: readyJobs[id].data
                }));
                delete readyJobs[id];
              } else {
                worker.ready = true;
              }

              if (_result.startsWith('ready:')) {
                start = Date.now();
                return;
              }

              const result = JSON.parse(_result);
              jobs[result.id].cb(result);
              delete [result.id];
            });
          }
        };

        const killWorkers = () => {
          Object.values(workers).forEach(worker => worker.kill());
        };

        const doJob = (module, cb) => {
          if (configMismatch) {
            cb({ error: new Error('config mismatch') });
            return;
          }

          const id = 'xxxxxxxx-xxxxxxxx'.replace(/x/g, () => Math.random().toString(16).substring(2, 3));
          jobs[id] = {
            id,
            data: freeze('Module', null, module, {
              id: module.identifier(),
              compilation
            }),
            cb
          };

          const worker = Object.values(workers).find(worker => worker.ready);
          if (worker) {
            worker.ready = false;
            worker.send(JSON.stringify({
              id,
              data: jobs[id].data
            }));
          } else {
            readyJobs[id] = jobs[id];
          }

          if (!started) {
            started = true;
            startWorkers();
          }
        };

        const _create = params.normalModuleFactory.create;
        params.normalModuleFactory.create = (data, cb) => {
          _create.call(params.normalModuleFactory, data, (err, module) => {
            if (err) {
              return cb(err);
            }
            if (module.constructor.name === 'NormalModule') {
              const build = module.build;
              module.build = (options, compilation, resolver, fs, callback) => {
                if (modules < minModules) {
                  build.call(module, options, compilation, resolver, fs, callback);
                  modules += 1;
                  return;
                }

                try {
                  doJob(module, result => {
                    if (result.error) {
                      build.call(module, options, compilation, resolver, fs, callback);
                    } else {
                      thaw('Module', module, result.module, {
                        compilation,
                        normalModuleFactory: params.normalModuleFactory,
                        contextModuleFactory: params.contextModuleFactory
                      });
                      callback();
                    }
                  });
                } catch (e) {
                  logMessages.parallelErrorSendingJob(compiler, e);
                  build.call(module, options, compilation, resolver, fs, callback);
                }
              };
              cb(null, module);
            } else {
              cb(err, module);
            }
          });
        };

        compilationHooks.seal.tap('ParallelModulePlugin', () => {
          killWorkers();
        });
      };

      const doChild = () => {
        const _create = params.normalModuleFactory.create;
        params.normalModuleFactory.create = (data, cb) => {};

        process.send('ready:' + compiler.__hardSource_configHash);

        process.on('message', _job => {
          const job = JSON.parse(_job);
          const module = thaw('Module', null, job.data, {
            compilation,
            normalModuleFactory: params.normalModuleFactory,
            contextModuleFactory: params.contextModuleFactory
          });

          module.build(compilation.options, compilation, compilation.resolverFactory.get('normal', module.resolveOptions), compilation.inputFileSystem, error => {
            process.send(JSON.stringify({
              id: job.id,
              error: error,
              module: module && freeze('Module', null, module, {
                id: module.identifier(),
                compilation
              })
            }));
          });
        });
      };

      if (!process.send) {
        doMaster();
      } else {
        doChild();
      }
    });
  }
}

module.exports = ParallelModulePlugin;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9QYXJhbGxlbE1vZHVsZVBsdWdpbi5qcyJdLCJuYW1lcyI6WyJmb3JrIiwiY3BGb3JrIiwicmVxdWlyZSIsImNwdXMiLCJyZXNvbHZlIiwibG9nTWVzc2FnZXMiLCJwbHVnaW5Db21wYXQiLCJ3ZWJwYWNrQmluIiwiZSIsIkVycm9yIiwiY29uZmlnUGF0aCIsImNvbXBpbGVyIiwib3B0aW9ucyIsImNvbnRleHQiLCJwcm9jZXNzIiwiY3dkIiwiUGFyYWxsZWxNb2R1bGVQbHVnaW4iLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwicGFyYWxsZWxSZXF1aXJlV2VicGFjazQiLCJzaWxlbnQiLCJudW1Xb3JrZXJzIiwibGVuZ3RoIiwibWluTW9kdWxlcyIsImNvbXBpbGVySG9va3MiLCJob29rcyIsImZyZWV6ZSIsInRoYXciLCJfaGFyZFNvdXJjZU1ldGhvZHMiLCJ0YXAiLCJtZXRob2RzIiwidGhpc0NvbXBpbGF0aW9uIiwiY29tcGlsYXRpb24iLCJwYXJhbXMiLCJjb21waWxhdGlvbkhvb2tzIiwibm1mSG9va3MiLCJub3JtYWxNb2R1bGVGYWN0b3J5IiwiZG9NYXN0ZXIiLCJqb2JzIiwicmVhZHlKb2JzIiwid29ya2VycyIsIm5leHRXb3JrZXJJbmRleCIsInN0YXJ0Iiwic3RhcnRlZCIsImNvbmZpZ01pc21hdGNoIiwibW9kdWxlcyIsInN0YXJ0V29ya2VycyIsIl9udW1Xb3JrZXJzIiwicGFyYWxsZWxTdGFydFdvcmtlcnMiLCJpIiwid29ya2VyIiwicHVzaCIsIm9uIiwiX3Jlc3VsdCIsInN0YXJ0c1dpdGgiLCJjb25maWdIYXNoIiwic3BsaXQiLCJfX2hhcmRTb3VyY2VfY29uZmlnSGFzaCIsInBhcmFsbGVsQ29uZmlnTWlzbWF0Y2giLCJvdXRIYXNoIiwidGhlaXJIYXNoIiwia2lsbFdvcmtlcnMiLCJpZCIsImNiIiwiZXJyb3IiLCJPYmplY3QiLCJ2YWx1ZXMiLCJrZXlzIiwic2VuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwicmVhZHkiLCJEYXRlIiwibm93IiwicmVzdWx0IiwicGFyc2UiLCJmb3JFYWNoIiwia2lsbCIsImRvSm9iIiwibW9kdWxlIiwicmVwbGFjZSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsImlkZW50aWZpZXIiLCJmaW5kIiwiX2NyZWF0ZSIsImNyZWF0ZSIsImNhbGwiLCJlcnIiLCJuYW1lIiwiYnVpbGQiLCJyZXNvbHZlciIsImZzIiwiY2FsbGJhY2siLCJjb250ZXh0TW9kdWxlRmFjdG9yeSIsInBhcmFsbGVsRXJyb3JTZW5kaW5nSm9iIiwic2VhbCIsImRvQ2hpbGQiLCJfam9iIiwiam9iIiwicmVzb2x2ZXJGYWN0b3J5IiwiZ2V0IiwicmVzb2x2ZU9wdGlvbnMiLCJpbnB1dEZpbGVTeXN0ZW0iLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sRUFBRUEsTUFBTUMsTUFBUixLQUFtQkMsUUFBUSxlQUFSLENBQXpCO0FBQ0EsTUFBTSxFQUFFQyxJQUFGLEtBQVdELFFBQVEsSUFBUixDQUFqQjtBQUNBLE1BQU0sRUFBRUUsT0FBRixLQUFjRixRQUFRLE1BQVIsQ0FBcEI7O0FBRUEsTUFBTUcsY0FBY0gsOEJBQXBCO0FBQ0EsTUFBTUksZUFBZUosK0JBQXJCOztBQUVBLE1BQU1LLGFBQWEsTUFBTTtBQUN2QixNQUFJO0FBQ0YsV0FBT0wsUUFBUUUsT0FBUixDQUFnQixhQUFoQixDQUFQO0FBQ0QsR0FGRCxDQUVFLE9BQU9JLENBQVAsRUFBVSxDQUFFO0FBQ2QsTUFBSTtBQUNGLFdBQU9OLFFBQVFFLE9BQVIsQ0FBZ0IsaUJBQWhCLENBQVA7QUFDRCxHQUZELENBRUUsT0FBT0ksQ0FBUCxFQUFVLENBQUU7QUFDZCxRQUFNLElBQUlDLEtBQUosQ0FBVSxnREFBVixDQUFOO0FBQ0QsQ0FSRDs7QUFVQSxNQUFNQyxhQUFhQyxZQUFZO0FBQzdCLE1BQUk7QUFDRixXQUFPVCxRQUFRRSxPQUFSLENBQ0xBLFFBQVFPLFNBQVNDLE9B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NEM7QUFFNUNJLGlDQUFxQkgsT0FBT0csbUJBRmdCO0FBRzVDNkQsa0NBQXNCaEUsT0FBT2dFO0FBSGUsV0FBL0IsQ0FBZjs7QUFNQWpCLGlCQUFPYSxLQUFQLENBQ0U3RCxZQUFZcEIsT0FEZCxFQUVFb0IsV0FGRixFQUdFQSxZQUFZdUUsZUFBWixDQUE0QkMsR0FBNUIsQ0FBZ0MsUUFBaEMsRUFBMEN4QixPQUFPeUIsY0FBakQsQ0FIRixFQUlFekUsWUFBWTBFLGVBSmQsRUFLRTFDLFNBQVM7QUFDUGxELG9CQUFRc0QsSUFBUixDQUNFQyxLQUFLQyxTQUFMLENBQWU7QUFDYlIsa0JBQUl3QyxJQUFJeEMsRUFESztBQUViRSxxQkFBT0EsS0FGTTtBQUdiZ0Isc0JBQ0VBLFVBQ0F0RCxPQUFPLFFBQVAsRUFBaUIsSUFBakIsRUFBdUJzRCxNQUF2QixFQUErQjtBQUM3QmxCLG9CQUFJa0IsT0FBT00sVUFBUCxFQUR5QjtBQUU3QnREO0FBRjZCLGVBQS9CO0FBTFcsYUFBZixDQURGO0FBWUQsV0FsQkg7QUFvQkQsU0E1QkQ7QUE2QkQsT0FuQ0Q7O0FBcUNBLFVBQUksQ0FBQ2xCLFFBQVFzRCxJQUFiLEVBQW1CO0FBQ2pCL0I7QUFDRCxPQUZELE1BRU87QUFDTCtEO0FBQ0Q7QUFDRixLQTFPSDtBQTRPRDtBQWpSd0I7O0FBb1IzQnBCLE9BQU8yQixPQUFQLEdBQWlCM0Ysb0JBQWpCIiwiZmlsZSI6ImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9QYXJhbGxlbE1vZHVsZVBsdWdpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZm9yazogY3BGb3JrIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG5jb25zdCB7IGNwdXMgfSA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCB7IHJlc29sdmUgfSA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgbG9nTWVzc2FnZXMgPSByZXF1aXJlKCcuL3V0aWwvbG9nLW1lc3NhZ2VzJyk7XG5jb25zdCBwbHVnaW5Db21wYXQgPSByZXF1aXJlKCcuL3V0aWwvcGx1Z2luLWNvbXBhdCcpO1xuXG5jb25zdCB3ZWJwYWNrQmluID0gKCkgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiByZXF1aXJlLnJlc29sdmUoJ3dlYnBhY2stY2xpJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUucmVzb2x2ZSgnd2VicGFjay1jb21tYW5kJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIHRocm93IG5ldyBFcnJvcignd2VicGFjayBjbGkgdG9vbCBub3QgaW5zdGFsbGVkIG9yIGRpc2NvdmVyYWJsZScpO1xufTtcblxuY29uc3QgY29uZmlnUGF0aCA9IGNvbXBpbGVyID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZS5yZXNvbHZlKFxuICAgICAgcmVzb2x2ZShjb21waWxlci5vcHRpb25zLmNvbnRleHQgfHwgcHJvY2Vzcy5jd2QoKSwgJ3dlYnBhY2suY29uZmlnJyksXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge31cbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZS5yZXNvbHZlKHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ3dlYnBhY2suY29uZmlnJykpO1xuICB9IGNhdGNoIChlKSB7fVxuICB0aHJvdyBuZXcgRXJyb3IoJ2NvbmZpZyBub3QgaW4gb2J2aW91cyBsb2NhdGlvbicpO1xufTtcblxuY2xhc3MgUGFyYWxsZWxNb2R1bGVQbHVnaW4ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIGFwcGx5KGNvbXBpbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlcXVpcmUoJ3dlYnBhY2svbGliL0phdmFzY3JpcHRHZW5lcmF0b3InKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dNZXNzYWdlcy5wYXJhbGxlbFJlcXVpcmVXZWJwYWNrNChjb21waWxlcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCBmb3JrID1cbiAgICAgIG9wdGlvbnMuZm9yayB8fFxuICAgICAgKChmb3JrLCBjb21waWxlciwgd2VicGFja0JpbikgPT5cbiAgICAgICAgZm9yayh3ZWJwYWNrQmluKGNvbXBpbGVyKSwgWyctLWNvbmZpZycsIGNvbmZpZ1BhdGgoY29tcGlsZXIpXSwge1xuICAgICAgICAgIHNpbGVudDogdHJ1ZSxcbiAgICAgICAgfSkpO1xuICAgIGNvbnN0IG51bVdvcmtlcnMgPSBvcHRpb25zLm51bVdvcmtlcnNcbiAgICAgID8gdHlwZW9mIG9wdGlvbnMubnVtV29ya2VycyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IG9wdGlvbnMubnVtV29ya2Vyc1xuICAgICAgICA6ICgpID0+IG9wdGlvbnMubnVtV29ya2Vyc1xuICAgICAgOiAoKSA9PiBjcHVzKCkubGVuZ3RoO1xuICAgIGNvbnN0IG1pbk1vZHVsZXMgPVxuICAgICAgdHlwZW9mIG9wdGlvbnMubWluTW9kdWxlcyA9PT0gJ251bWJlcicgPyBvcHRpb25zLm1pbk1vZHVsZXMgOiAxMDtcblxuICAgIGNvbnN0IGNvbXBpbGVySG9va3MgPSBwbHVnaW5Db21wYXQuaG9va3MoY29tcGlsZXIpO1xuXG4gICAgbGV0IGZyZWV6ZSwgdGhhdztcblxuICAgIGNvbXBpbGVySG9va3MuX2hhcmRTb3VyY2VNZXRob2RzLnRhcCgnUGFyYWxsZWxNb2R1bGVQbHVnaW4nLCBtZXRob2RzID0+IHtcbiAgICAgIGZyZWV6ZSA9IG1ldGhvZHMuZnJlZXplO1xuICAgICAgdGhhdyA9IG1ldGhvZHMudGhhdztcbiAgICB9KTtcblxuICAgIGNvbXBpbGVySG9va3MudGhpc0NvbXBpbGF0aW9uLnRhcChcbiAgICAgICdQYXJhbGxlbE1vZHVsZVBsdWdpbicsXG4gICAgICAoY29tcGlsYXRpb24sIHBhcmFtcykgPT4ge1xuICAgICAgICBjb25zdCBjb21waWxhdGlvbkhvb2tzID0gcGx1Z2luQ29tcGF0Lmhvb2tzKGNvbXBpbGF0aW9uKTtcbiAgICAgICAgY29uc3Qgbm1mSG9va3MgPSBwbHVnaW5Db21wYXQuaG9va3MocGFyYW1zLm5vcm1hbE1vZHVsZUZhY3RvcnkpO1xuXG4gICAgICAgIGNvbnN0IGRvTWFzdGVyID0gKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGpvYnMgPSB7fTtcbiAgICAgICAgICBjb25zdCByZWFkeUpvYnMgPSB7fTtcbiAgICAgICAgICBjb25zdCB3b3JrZXJzID0gW107XG5cbiAgICAgICAgICBsZXQgbmV4dFdvcmtlckluZGV4ID0gMDtcblxuICAgICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICBsZXQgY29uZmlnTWlzbWF0Y2ggPSBmYWxzZTtcblxuICAgICAgICAgIGxldCBtb2R1bGVzID0gMDtcblxuICAgICAgICAgIGNvbnN0IHN0YXJ0V29ya2VycyA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IF9udW1Xb3JrZXJzID0gbnVtV29ya2VycygpO1xuICAgICAgICAgICAgbG9nTWVzc2FnZXMucGFyYWxsZWxTdGFydFdvcmtlcnMoY29tcGlsZXIsIHtcbiAgICAgICAgICAgICAgbnVtV29ya2VyczogX251bVdvcmtlcnMsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfbnVtV29ya2VyczsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHdvcmtlciA9IGZvcmsoY3BGb3JrLCBjb21waWxlciwgd2VicGFja0Jpbik7XG4gICAgICAgICAgICAgIHdvcmtlcnMucHVzaCh3b3JrZXIpO1xuICAgICAgICAgICAgICB3b3JrZXIub24oJ21lc3NhZ2UnLCBfcmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnTWlzbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoX3Jlc3VsdC5zdGFydHNXaXRoKCdyZWFkeTonKSkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY29uZmlnSGFzaCA9IF9yZXN1bHQuc3BsaXQoJzonKVsxXTtcbiAgICAgICAgICAgICAgICAgIGlmIChjb25maWdIYXNoICE9PSBjb21waWxlci5fX2hhcmRTb3VyY2VfY29uZmlnSGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dNZXNzYWdlcy5wYXJhbGxlbENvbmZpZ01pc21hdGNoKGNvbXBpbGVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0SGFzaDogY29tcGlsZXIuX19oYXJkU291cmNlX2NvbmZpZ0hhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgdGhlaXJIYXNoOiBjb25maWdIYXNoLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25maWdNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGtpbGxXb3JrZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gam9icykge1xuICAgICAgICAgICAgICAgICAgICAgIGpvYnNbaWRdLmNiKHsgZXJyb3I6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlYWR5Sm9ic1tpZF07XG4gICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGpvYnNbaWRdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhyZWFkeUpvYnMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBPYmplY3Qua2V5cyhyZWFkeUpvYnMpWzBdO1xuICAgICAgICAgICAgICAgICAgd29ya2VyLnNlbmQoXG4gICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByZWFkeUpvYnNbaWRdLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZWFkeUpvYnNbaWRdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB3b3JrZXIucmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfcmVzdWx0LnN0YXJ0c1dpdGgoJ3JlYWR5OicpKSB7XG4gICAgICAgICAgICAgICAgICBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShfcmVzdWx0KTtcbiAgICAgICAgICAgICAgICBqb2JzW3Jlc3VsdC5pZF0uY2IocmVzdWx0KTtcbiAgICAgICAgICAgICAgICBkZWxldGUgW3Jlc3VsdC5pZF07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCBraWxsV29ya2VycyA9ICgpID0+IHtcbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXMod29ya2VycykuZm9yRWFjaCh3b3JrZXIgPT4gd29ya2VyLmtpbGwoKSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IGRvSm9iID0gKG1vZHVsZSwgY2IpID0+IHtcbiAgICAgICAgICAgIGlmIChjb25maWdNaXNtYXRjaCkge1xuICAgICAgICAgICAgICBjYih7IGVycm9yOiBuZXcgRXJyb3IoJ2NvbmZpZyBtaXNtYXRjaCcpIH0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGlkID0gJ3h4eHh4eHh4LXh4eHh4eHh4Jy5yZXBsYWNlKC94L2csICgpID0+XG4gICAgICAgICAgICAgIE1hdGgucmFuZG9tKClcbiAgICAgICAgICAgICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgLnN1YnN0cmluZygyLCAzKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBqb2JzW2lkXSA9IHtcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIGRhdGE6IGZyZWV6ZSgnTW9kdWxlJywgbnVsbCwgbW9kdWxlLCB7XG4gICAgICAgICAgICAgICAgaWQ6IG1vZHVsZS5pZGVudGlmaWVyKCksXG4gICAgICAgICAgICAgICAgY29tcGlsYXRpb24sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBjYixcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHdvcmtlciA9IE9iamVjdC52YWx1ZXMod29ya2VycykuZmluZCh3b3JrZXIgPT4gd29ya2VyLnJlYWR5KTtcbiAgICAgICAgICAgIGlmICh3b3JrZXIpIHtcbiAgICAgICAgICAgICAgd29ya2VyLnJlYWR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgIHdvcmtlci5zZW5kKFxuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgZGF0YTogam9ic1tpZF0uZGF0YSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlYWR5Sm9ic1tpZF0gPSBqb2JzW2lkXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzdGFydGVkKSB7XG4gICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBzdGFydFdvcmtlcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgX2NyZWF0ZSA9IHBhcmFtcy5ub3JtYWxNb2R1bGVGYWN0b3J5LmNyZWF0ZTtcbiAgICAgICAgICBwYXJhbXMubm9ybWFsTW9kdWxlRmFjdG9yeS5jcmVhdGUgPSAoZGF0YSwgY2IpID0+IHtcbiAgICAgICAgICAgIF9jcmVhdGUuY2FsbChwYXJhbXMubm9ybWFsTW9kdWxlRmFjdG9yeSwgZGF0YSwgKGVyciwgbW9kdWxlKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobW9kdWxlLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdOb3JtYWxNb2R1bGUnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVpbGQgPSBtb2R1bGUuYnVpbGQ7XG4gICAgICAgICAgICAgICAgbW9kdWxlLmJ1aWxkID0gKFxuICAgICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgIGNvbXBpbGF0aW9uLFxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZXIsXG4gICAgICAgICAgICAgICAgICBmcyxcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKG1vZHVsZXMgPCBtaW5Nb2R1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgbW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgY29tcGlsYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgZnMsXG4gICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZXMgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkb0pvYihtb2R1bGUsIHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGQuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21waWxhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXcoJ01vZHVsZScsIG1vZHVsZSwgcmVzdWx0Lm1vZHVsZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21waWxhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsTW9kdWxlRmFjdG9yeTogcGFyYW1zLm5vcm1hbE1vZHVsZUZhY3RvcnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRNb2R1bGVGYWN0b3J5OiBwYXJhbXMuY29udGV4dE1vZHVsZUZhY3RvcnksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nTWVzc2FnZXMucGFyYWxsZWxFcnJvclNlbmRpbmdKb2IoY29tcGlsZXIsIGUpO1xuICAgICAgICAgICAgICAgICAgICBidWlsZC5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZSxcbiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbXBpbGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVyLFxuICAgICAgICAgICAgICAgICAgICAgIGZzLFxuICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY2IobnVsbCwgbW9kdWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYihlcnIsIG1vZHVsZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb21waWxhdGlvbkhvb2tzLnNlYWwudGFwKCdQYXJhbGxlbE1vZHVsZVBsdWdpbicsICgpID0+IHtcbiAgICAgICAgICAgIGtpbGxXb3JrZXJzKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZG9DaGlsZCA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBfY3JlYXRlID0gcGFyYW1zLm5vcm1hbE1vZHVsZUZhY3RvcnkuY3JlYXRlO1xuICAgICAgICAgIHBhcmFtcy5ub3JtYWxNb2R1bGVGYWN0b3J5LmNyZWF0ZSA9IChkYXRhLCBjYikgPT4ge307XG5cbiAgICAgICAgICBwcm9jZXNzLnNlbmQoJ3JlYWR5OicgKyBjb21waWxlci5fX2hhcmRTb3VyY2VfY29uZmlnSGFzaCk7XG5cbiAgICAgICAgICBwcm9jZXNzLm9uKCdtZXNzYWdlJywgX2pvYiA9PiB7XG4gICAgICAgICAgICBjb25zdCBqb2IgPSBKU09OLnBhcnNlKF9qb2IpO1xuICAgICAgICAgICAgY29uc3QgbW9kdWxlID0gdGhhdygnTW9kdWxlJywgbnVsbCwgam9iLmRhdGEsIHtcbiAgICAgICAgICAgICAgY29tcGlsYXRpb24sXG4gICAgICAgICAgICAgIG5vcm1hbE1vZHVsZUZhY3Rvcnk6IHBhcmFtcy5ub3JtYWxNb2R1bGVGYWN0b3J5LFxuICAgICAgICAgICAgICBjb250ZXh0TW9kdWxlRmFjdG9yeTogcGFyYW1zLmNvbnRleHRNb2R1bGVGYWN0b3J5LFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1vZHVsZS5idWlsZChcbiAgICAgICAgICAgICAgY29tcGlsYXRpb24ub3B0aW9ucyxcbiAgICAgICAgICAgICAgY29tcGlsYXRpb24sXG4gICAgICAgICAgICAgIGNvbXBpbGF0aW9uLnJlc29sdmVyRmFjdG9yeS5nZXQoJ25vcm1hbCcsIG1vZHVsZS5yZXNvbHZlT3B0aW9ucyksXG4gICAgICAgICAgICAgIGNvbXBpbGF0aW9uLmlucHV0RmlsZVN5c3RlbSxcbiAgICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIHByb2Nlc3Muc2VuZChcbiAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGpvYi5pZCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGU6XG4gICAgICAgICAgICAgICAgICAgICAgbW9kdWxlICYmXG4gICAgICAgICAgICAgICAgICAgICAgZnJlZXplKCdNb2R1bGUnLCBudWxsLCBtb2R1bGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBtb2R1bGUuaWRlbnRpZmllcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGlsYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIXByb2Nlc3Muc2VuZCkge1xuICAgICAgICAgIGRvTWFzdGVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9DaGlsZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJhbGxlbE1vZHVsZVBsdWdpbjtcbiJdLCJzb3VyY2VSb290IjoiL1VzZXJzL3R5bGVyYXJidXMvZGV2L3Byb3ZpZGVyL3NyYyJ9

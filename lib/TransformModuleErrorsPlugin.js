'use strict';

const WebpackError = require('webpack/lib/WebpackError');
const ModuleError = require('webpack/lib/ModuleError');
const ModuleWarning = require('webpack/lib/ModuleWarning');

const pluginCompat = require('./util/plugin-compat');

class TransformModuleErrorsPlugin {
  apply(compiler) {
    let freeze;
    let thaw;
    let mapFreeze;
    let mapThaw;

    pluginCompat.tap(compiler, '_hardSourceMethods', 'TransformModuleErrorsPlugin', methods => {
      // store = methods.store;
      // fetch = methods.fetch;
      freeze = methods.freeze;
      thaw = methods.thaw;
      mapFreeze = methods.mapFreeze;
      mapThaw = methods.mapThaw;
    });

    function freezeErrorWarning(frozen, { message, details, originLoc, dependencies, name, loc, constructor }, extra) {
      return {
        constructor: constructor.name,
        message: message,
        details: details,
        originLoc: originLoc,
        dependencies: dependencies && mapFreeze('Dependency', null, dependencies, extra),
        name: name,
        loc: loc
      };
    }

    pluginCompat.tap(compiler, '_hardSourceFreezeModuleError', 'TransformModuleErrorsPlugin', freezeErrorWarning);
    pluginCompat.tap(compiler, '_hardSourceFreezeModuleWarning', 'TransformModuleErrorsPlugin', freezeErrorWarning);

    function thawError(ErrorClass, error, { constructor, message, details, originLoc, dependencies, name, loc }, extra) {
      const module = extra.module;
      error = new ErrorClass(module, message);
      if (constructor === 'SystemImportDeprecationWarning') {
        error = new WebpackError(message);
        error.module = module;
      }
      if (details) {
        error.details = details;
      }

      if (extra.origin) {
        error.origin = extra.origin;
      }
      if (originLoc) {
        error.originLoc = originLoc;
      }
      if (dependencies) {
        error.dependencies = mapThaw('Dependency', null, dependencies, extra);
      }
      if (name) {
        error.name = name;
      }
      if (loc) {
        error.loc = loc;
      }
      return error;
    }

    pluginCompat.tap(compiler, '_hardSourceThawModuleError', 'TransformModuleErrorsPlugin', (error, frozen, extra) => thawError(ModuleError, error, frozen, extra));

    pluginCompat.tap(compiler, '_hardSourceThawModuleWarning', 'TransformModuleErrorsPlugin', (warning, frozen, extra) => thawError(ModuleWarning, warning, frozen, extra));
  }
}

module.exports = TransformModuleErrorsPlugin;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9UcmFuc2Zvcm1Nb2R1bGVFcnJvcnNQbHVnaW4uanMiXSwibmFtZXMiOlsiV2VicGFja0Vycm9yIiwicmVxdWlyZSIsIk1vZHVsZUVycm9yIiwiTW9kdWxlV2FybmluZyIsInBsdWdpbkNvbXBhdCIsIlRyYW5zZm9ybU1vZHVsZUVycm9yc1BsdWdpbiIsImFwcGx5IiwiY29tcGlsZXIiLCJmcmVlemUiLCJ0aGF3IiwibWFwRnJlZXplIiwibWFwVGhhdyIsInRhcCIsIm1ldGhvZHMiLCJmcmVlemVFcnJvcldhcm5pbmciLCJmcm96ZW4iLCJtZXNzYWdlIiwiZGV0YWlscyIsIm9yaWdpbkxvYyIsImRlcGVuZGVuY2llcyIsIm5hbWUiLCJsb2MiLCJjb25zdHJ1Y3RvciIsImV4dHJhIiwidGhhd0Vycm9yIiwiRXJyb3JDbGFzcyIsImVycm9yIiwibW9kdWxlIiwib3JpZ2luIiwid2FybmluZyIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsZUFBZUMsUUFBUSwwQkFBUixDQUFyQjtBQUNBLE1BQU1DLGNBQWNELFFBQVEseUJBQVIsQ0FBcEI7QUFDQSxNQUFNRSxnQkFBZ0JGLFFBQVEsMkJBQVIsQ0FBdEI7O0FBRUEsTUFBTUcsZUFBZUgsK0JBQXJCOztBQUVBLE1BQU1JLDJCQUFOLENBQWtDO0FBQ2hDQyxRQUFNQyxRQUFOLEVBQWdCO0FBQ2QsUUFBSUMsTUFBSjtBQUNBLFFBQUlDLElBQUo7QUFDQSxRQUFJQyxTQUFKO0FBQ0EsUUFBSUMsT0FBSjs7QUFFQVAsaUJBQWFRLEdBQWIsQ0FDRUwsUUFERixFQUVFLG9CQUZGLEVBR0UsNkJBSEYsRUFJRU0sV0FBVztBQUNUO0FBQ0E7QUFDQUwsZUFBU0ssUUFBUUwsTUFBakI7QUFDQUMsYUFBT0ksUUFBUUosSUFBZjtBQUNBQyxrQkFBWUcsUUFBUUgsU0FBcEI7QUFDQUMsZ0JBQVVFLFFBQVFGLE9BQWxCO0FBQ0QsS0FYSDs7QUFjQSxhQUFTRyxrQkFBVCxDQUNFQyxNQURGLEVBRUUsRUFBRUMsT0FBRixFQUFXQyxPQUFYLEVBQW9CQyxTQUFwQixFQUErQkMsWUFBL0IsRUFBNkNDLElBQTdDLEVBQW1EQyxHQUFuRCxFQUF3REMsV0FBeEQsRUFGRixFQUdFQyxLQUhGLEVBSUU7QUFDQSxhQUFPO0FBQ0xELHFCQUFhQSxZQUFZRixJQURwQjtBQUVMSixpQkFBU0EsT0FGSjtBQUdMQyxpQkFBU0EsT0FISjtBQUlMQyxtQkFBV0EsU0FKTjtBQUtMQyxzQkFDRUEsZ0JBQWdCVCxVQUFVLFlBQVYsRUFBd0IsSUFBeEIsRUFBOEJTLFlBQTlCLEVBQTRDSSxLQUE1QyxDQU5iO0FBT0xILGNBQU1BLElBUEQ7QUFRTEMsYUFBS0E7QUFSQSxPQUFQO0FBVUQ7O0FBRURqQixpQkFBYVEsR0FBYixDQUNFTCxRQURGLEVBRUUsOEJBRkYsRUFHRSw2QkFIRixFQUlFTyxrQkFKRjtBQU1BVixpQkFBYVEsR0FBYixDQUNFTCxRQURGLEVBRUUsZ0NBRkYsRUFHRSw2QkFIRixFQUlFTyxrQkFKRjs7QUFPQSxhQUFTVSxTQUFULENBQ0VDLFVBREYsRUFFRUMsS0FGRixFQUdFLEVBQUVKLFdBQUYsRUFBZU4sT0FBZixFQUF3QkMsT0FBeEIsRUFBaUNDLFNBQWpDLEVBQTRDQyxZQUE1QyxFQUEwREMsSUFBMUQsRUFBZ0VDLEdBQWhFLEVBSEYsRUFJRUUsS0FKRixFQUtFO0FBQ0EsWUFBTUksU0FBU0osTUFBTUksTUFBckI7QUFDQUQsY0FBUSxJQUFJRCxVQUFKLENBQWVFLE1BQWYsRUFBdUJYLE9BQXZCLENBQVI7QUFDQSxVQUFJTSxnQkFBZ0IsZ0NBQXBCLEVBQXNEO0FBQ3BESSxnQkFBUSxJQUFJMUIsWUFBSixDQUFpQmdCLE9BQWpCLENBQVI7QUFDQVUsY0FBTUMsTUFBTixHQUFlQSxNQUFmO0FBQ0Q7QUFDRCxVQUFJVixPQUFKLEVBQWE7QUFDWFMsY0FBTVQsT0FBTixHQUFnQkEsT0FBaEI7QUFDRDs7QUFFRCxVQUFJTSxNQUFNSyxNQUFWLEVBQWtCO0FBQ2hCRixjQUFNRSxNQUFOLEdBQWVMLE1BQU1LLE1BQXJCO0FBQ0Q7QUFDRCxVQUFJVixTQUFKLEVBQWU7QUFDYlEsY0FBTVIsU0FBTixHQUFrQkEsU0FBbEI7QUFDRDtBQUNELFVBQUlDLFlBQUosRUFBa0I7QUFDaEJPLGNBQU1QLFlBQU4sR0FBcUJSLFFBQVEsWUFBUixFQUFzQixJQUF0QixFQUE0QlEsWUFBNUIsRUFBMENJLEtBQTFDLENBQXJCO0FBQ0Q7QUFDRCxVQUFJSCxJQUFKLEVBQVU7QUFDUk0sY0FBTU4sSUFBTixHQUFhQSxJQUFiO0FBQ0Q7QUFDRCxVQUFJQyxHQUFKLEVBQVM7QUFDUEssY0FBTUwsR0FBTixHQUFZQSxHQUFaO0FBQ0Q7QUFDRCxhQUFPSyxLQUFQO0FBQ0Q7O0FBRUR0QixpQkFBYVEsR0FBYixDQUNFTCxRQURGLEVBRUUsNEJBRkYsRUFHRSw2QkFIRixFQUlFLENBQUNtQixLQUFELEVBQVFYLE1BQVIsRUFBZ0JRLEtBQWhCLEtBQTBCQyxVQUFVdEIsV0FBVixFQUF1QndCLEtBQXZCLEVBQThCWCxNQUE5QixFQUFzQ1EsS0FBdEMsQ0FKNUI7O0FBT0FuQixpQkFBYVEsR0FBYixDQUNFTCxRQURGLEVBRUUsOEJBRkYsRUFHRSw2QkFIRixFQUlFLENBQUNzQixPQUFELEVBQVVkLE1BQVYsRUFBa0JRLEtBQWxCLEtBQ0VDLFVBQVVyQixhQUFWLEVBQXlCMEIsT0FBekIsRUFBa0NkLE1BQWxDLEVBQTBDUSxLQUExQyxDQUxKO0FBT0Q7QUFuRytCOztBQXNHbENJLE9BQU9HLE9BQVAsR0FBaUJ6QiwyQkFBakIiLCJmaWxlIjoiaGFyZC1zb3VyY2Utd2VicGFjay1wbHVnaW4vbGliL1RyYW5zZm9ybU1vZHVsZUVycm9yc1BsdWdpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFdlYnBhY2tFcnJvciA9IHJlcXVpcmUoJ3dlYnBhY2svbGliL1dlYnBhY2tFcnJvcicpO1xuY29uc3QgTW9kdWxlRXJyb3IgPSByZXF1aXJlKCd3ZWJwYWNrL2xpYi9Nb2R1bGVFcnJvcicpO1xuY29uc3QgTW9kdWxlV2FybmluZyA9IHJlcXVpcmUoJ3dlYnBhY2svbGliL01vZHVsZVdhcm5pbmcnKTtcblxuY29uc3QgcGx1Z2luQ29tcGF0ID0gcmVxdWlyZSgnLi91dGlsL3BsdWdpbi1jb21wYXQnKTtcblxuY2xhc3MgVHJhbnNmb3JtTW9kdWxlRXJyb3JzUGx1Z2luIHtcbiAgYXBwbHkoY29tcGlsZXIpIHtcbiAgICBsZXQgZnJlZXplO1xuICAgIGxldCB0aGF3O1xuICAgIGxldCBtYXBGcmVlemU7XG4gICAgbGV0IG1hcFRoYXc7XG5cbiAgICBwbHVnaW5Db21wYXQudGFwKFxuICAgICAgY29tcGlsZXIsXG4gICAgICAnX2hhcmRTb3VyY2VNZXRob2RzJyxcbiAgICAgICdUcmFuc2Zvcm1Nb2R1bGVFcnJvcnNQbHVnaW4nLFxuICAgICAgbWV0aG9kcyA9PiB7XG4gICAgICAgIC8vIHN0b3JlID0gbWV0aG9kcy5zdG9yZTtcbiAgICAgICAgLy8gZmV0Y2ggPSBtZXRob2RzLmZldGNoO1xuICAgICAgICBmcmVlemUgPSBtZXRob2RzLmZyZWV6ZTtcbiAgICAgICAgdGhhdyA9IG1ldGhvZHMudGhhdztcbiAgICAgICAgbWFwRnJlZXplID0gbWV0aG9kcy5tYXBGcmVlemU7XG4gICAgICAgIG1hcFRoYXcgPSBtZXRob2RzLm1hcFRoYXc7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBmcmVlemVFcnJvcldhcm5pbmcoXG4gICAgICBmcm96ZW4sXG4gICAgICB7IG1lc3NhZ2UsIGRldGFpbHMsIG9yaWdpbkxvYywgZGVwZW5kZW5jaWVzLCBuYW1lLCBsb2MsIGNvbnN0cnVjdG9yIH0sXG4gICAgICBleHRyYSxcbiAgICApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiBjb25zdHJ1Y3Rvci5uYW1lLFxuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICBkZXRhaWxzOiBkZXRhaWxzLFxuICAgICAgICBvcmlnaW5Mb2M6IG9yaWdpbkxvYyxcbiAgICAgICAgZGVwZW5kZW5jaWVzOlxuICAgICAgICAgIGRlcGVuZGVuY2llcyAmJiBtYXBGcmVlemUoJ0RlcGVuZGVuY3knLCBudWxsLCBkZXBlbmRlbmNpZXMsIGV4dHJhKSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgbG9jOiBsb2MsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHBsdWdpbkNvbXBhdC50YXAoXG4gICAgICBjb21waWxlcixcbiAgICAgICdfaGFyZFNvdXJjZUZyZWV6ZU1vZHVsZUVycm9yJyxcbiAgICAgICdUcmFuc2Zvcm1Nb2R1bGVFcnJvcnNQbHVnaW4nLFxuICAgICAgZnJlZXplRXJyb3JXYXJuaW5nLFxuICAgICk7XG4gICAgcGx1Z2luQ29tcGF0LnRhcChcbiAgICAgIGNvbXBpbGVyLFxuICAgICAgJ19oYXJkU291cmNlRnJlZXplTW9kdWxlV2FybmluZycsXG4gICAgICAnVHJhbnNmb3JtTW9kdWxlRXJyb3JzUGx1Z2luJyxcbiAgICAgIGZyZWV6ZUVycm9yV2FybmluZyxcbiAgICApO1xuXG4gICAgZnVuY3Rpb24gdGhhd0Vycm9yKFxuICAgICAgRXJyb3JDbGFzcyxcbiAgICAgIGVycm9yLFxuICAgICAgeyBjb25zdHJ1Y3RvciwgbWVzc2FnZSwgZGV0YWlscywgb3JpZ2luTG9jLCBkZXBlbmRlbmNpZXMsIG5hbWUsIGxvYyB9LFxuICAgICAgZXh0cmEsXG4gICAgKSB7XG4gICAgICBjb25zdCBtb2R1bGUgPSBleHRyYS5tb2R1bGU7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvckNsYXNzKG1vZHVsZSwgbWVzc2FnZSk7XG4gICAgICBpZiAoY29uc3RydWN0b3IgPT09ICdTeXN0ZW1JbXBvcnREZXByZWNhdGlvbldhcm5pbmcnKSB7XG4gICAgICAgIGVycm9yID0gbmV3IFdlYnBhY2tFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgZXJyb3IubW9kdWxlID0gbW9kdWxlO1xuICAgICAgfVxuICAgICAgaWYgKGRldGFpbHMpIHtcbiAgICAgICAgZXJyb3IuZGV0YWlscyA9IGRldGFpbHM7XG4gICAgICB9XG5cbiAgICAgIGlmIChleHRyYS5vcmlnaW4pIHtcbiAgICAgICAgZXJyb3Iub3JpZ2luID0gZXh0cmEub3JpZ2luO1xuICAgICAgfVxuICAgICAgaWYgKG9yaWdpbkxvYykge1xuICAgICAgICBlcnJvci5vcmlnaW5Mb2MgPSBvcmlnaW5Mb2M7XG4gICAgICB9XG4gICAgICBpZiAoZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgIGVycm9yLmRlcGVuZGVuY2llcyA9IG1hcFRoYXcoJ0RlcGVuZGVuY3knLCBudWxsLCBkZXBlbmRlbmNpZXMsIGV4dHJhKTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIGVycm9yLm5hbWUgPSBuYW1lO1xuICAgICAgfVxuICAgICAgaWYgKGxvYykge1xuICAgICAgICBlcnJvci5sb2MgPSBsb2M7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuXG4gICAgcGx1Z2luQ29tcGF0LnRhcChcbiAgICAgIGNvbXBpbGVyLFxuICAgICAgJ19oYXJkU291cmNlVGhhd01vZHVsZUVycm9yJyxcbiAgICAgICdUcmFuc2Zvcm1Nb2R1bGVFcnJvcnNQbHVnaW4nLFxuICAgICAgKGVycm9yLCBmcm96ZW4sIGV4dHJhKSA9PiB0aGF3RXJyb3IoTW9kdWxlRXJyb3IsIGVycm9yLCBmcm96ZW4sIGV4dHJhKSxcbiAgICApO1xuXG4gICAgcGx1Z2luQ29tcGF0LnRhcChcbiAgICAgIGNvbXBpbGVyLFxuICAgICAgJ19oYXJkU291cmNlVGhhd01vZHVsZVdhcm5pbmcnLFxuICAgICAgJ1RyYW5zZm9ybU1vZHVsZUVycm9yc1BsdWdpbicsXG4gICAgICAod2FybmluZywgZnJvemVuLCBleHRyYSkgPT5cbiAgICAgICAgdGhhd0Vycm9yKE1vZHVsZVdhcm5pbmcsIHdhcm5pbmcsIGZyb3plbiwgZXh0cmEpLFxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm1Nb2R1bGVFcnJvcnNQbHVnaW47XG4iXSwic291cmNlUm9vdCI6Ii9Vc2Vycy90eWxlcmFyYnVzL2Rldi9wcm92aWRlci9zcmMifQ==

'use strict';

require('source-map-support/register');

const pluginCompat = require('./util/plugin-compat');

const mixinCssDependency = function (CssDependency) {
  const Dependency = Object.getPrototypeOf(CssDependency.prototype).constructor;
  CssDependency.prototype.updateHash = function (hash) {
    Dependency.prototype.updateHash.call(this, hash);
    hash.update(this.content);
  };
};

class SupportMiniCssExtractPlugin {
  apply(compiler) {
    let CssDependency;

    pluginCompat.tap(compiler, 'make', 'SupportMiniCssExtractPlugin', ({ dependencyFactories }) => {
      const Dependencies = dependencyFactories.keys();
      for (const Dep of Dependencies) {
        if (Dep.name === 'CssDependency') {
          CssDependency = Dep;
          mixinCssDependency(CssDependency);
          break;
        }
      }
    });

    pluginCompat.tap(compiler, '_hardSourceFreezeDependency', 'HardMiniCssExtractPlugin freeze', (frozen, dependency, extra) => {
      if (dependency.constructor === CssDependency) {
        return {
          type: 'CssDependency',
          line: {
            identifier: dependency.identifier,
            content: dependency.content,
            media: dependency.media,
            sourceMap: dependency.sourceMap
          },
          context: dependency.context,
          identifierIndex: dependency.identifierIndex
        };
      }
      return frozen;
    });

    pluginCompat.tap(compiler, '_hardSourceThawDependency', 'HardMiniCssExtractPlugin', (dependency, { type, line, context, identifierIndex }, extra) => {
      if (type === 'CssDependency') {
        return new CssDependency(line, context, identifierIndex);
      }
      return dependency;
    });
  }
}

module.exports = SupportMiniCssExtractPlugin;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9TdXBwb3J0TWluaUNzc0V4dHJhY3RQbHVnaW4uanMiXSwibmFtZXMiOlsicGx1Z2luQ29tcGF0IiwicmVxdWlyZSIsIm1peGluQ3NzRGVwZW5kZW5jeSIsIkNzc0RlcGVuZGVuY3kiLCJEZXBlbmRlbmN5IiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsInVwZGF0ZUhhc2giLCJoYXNoIiwiY2FsbCIsInVwZGF0ZSIsImNvbnRlbnQiLCJTdXBwb3J0TWluaUNzc0V4dHJhY3RQbHVnaW4iLCJhcHBseSIsImNvbXBpbGVyIiwidGFwIiwiZGVwZW5kZW5jeUZhY3RvcmllcyIsIkRlcGVuZGVuY2llcyIsImtleXMiLCJEZXAiLCJuYW1lIiwiZnJvemVuIiwiZGVwZW5kZW5jeSIsImV4dHJhIiwidHlwZSIsImxpbmUiLCJpZGVudGlmaWVyIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJjb250ZXh0IiwiaWRlbnRpZmllckluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGVBQWVDLFFBQVEsc0JBQVIsQ0FBckI7O0FBRUEsTUFBTUMscUJBQXFCLFVBQVNDLGFBQVQsRUFBd0I7QUFDakQsUUFBTUMsYUFBYUMsT0FBT0MsY0FBUCxDQUFzQkgsY0FBY0ksU0FBcEMsRUFBK0NDLFdBQWxFO0FBQ0FMLGdCQUFjSSxTQUFkLENBQXdCRSxVQUF4QixHQUFxQyxVQUFTQyxJQUFULEVBQWU7QUFDbEROLGVBQVdHLFNBQVgsQ0FBcUJFLFVBQXJCLENBQWdDRSxJQUFoQyxDQUFxQyxJQUFyQyxFQUEyQ0QsSUFBM0M7QUFDQUEsU0FBS0UsTUFBTCxDQUFZLEtBQUtDLE9BQWpCO0FBQ0QsR0FIRDtBQUlELENBTkQ7O0FBUUEsTUFBTUMsMkJBQU4sQ0FBa0M7QUFDaENDLFFBQU1DLFFBQU4sRUFBZ0I7QUFDZCxRQUFJYixhQUFKOztBQUVBSCxpQkFBYWlCLEdBQWIsQ0FDRUQsUUFERixFQUVFLE1BRkYsRUFHRSw2QkFIRixFQUlFLENBQUMsRUFBRUUsbUJBQUYsRUFBRCxLQUE2QjtBQUMzQixZQUFNQyxlQUFlRCxvQkFBb0JFLElBQXBCLEVBQXJCO0FBQ0EsV0FBSyxNQUFNQyxHQUFYLElBQWtCRixZQUFsQixFQUFnQztBQUM5QixZQUFJRSxJQUFJQyxJQUFKLEtBQWEsZUFBakIsRUFBa0M7QUFDaENuQiwwQkFBZ0JrQixHQUFoQjtBQUNBbkIsNkJBQW1CQyxhQUFuQjtBQUNBO0FBQ0Q7QUFDRjtBQUNGLEtBYkg7O0FBZ0JBSCxpQkFBYWlCLEdBQWIsQ0FDRUQsUUFERixFQUVFLDZCQUZGLEVBR0UsaUNBSEYsRUFJRSxDQUFDTyxNQUFELEVBQVNDLFVBQVQsRUFBcUJDLEtBQXJCLEtBQStCO0FBQzdCLFVBQUlELFdBQVdoQixXQUFYLEtBQTJCTCxhQUEvQixFQUE4QztBQUM1QyxlQUFPO0FBQ0x1QixnQkFBTSxlQUREO0FBRUxDLGdCQUFNO0FBQ0pDLHdCQUFZSixXQUFXSSxVQURuQjtBQUVKZixxQkFBU1csV0FBV1gsT0FGaEI7QUFHSmdCLG1CQUFPTCxXQUFXSyxLQUhkO0FBSUpDLHVCQUFXTixXQUFXTTtBQUpsQixXQUZEO0FBUUxDLG1CQUFTUCxXQUFXTyxPQVJmO0FBU0xDLDJCQUFpQlIsV0FBV1E7QUFUdkIsU0FBUDtBQVdEO0FBQ0QsYUFBT1QsTUFBUDtBQUNELEtBbkJIOztBQXNCQXZCLGlCQUFhaUIsR0FBYixDQUNFRCxRQURGLEVBRUUsMkJBRkYsRUFHRSwwQkFIRixFQUlFLENBQUNRLFVBQUQsRUFBYSxFQUFFRSxJQUFGLEVBQVFDLElBQVIsRUFBY0ksT0FBZCxFQUF1QkMsZUFBdkIsRUFBYixFQUF1RFAsS0FBdkQsS0FBaUU7QUFDL0QsVUFBSUMsU0FBUyxlQUFiLEVBQThCO0FBQzVCLGVBQU8sSUFBSXZCLGFBQUosQ0FBa0J3QixJQUFsQixFQUF3QkksT0FBeEIsRUFBaUNDLGVBQWpDLENBQVA7QUFDRDtBQUNELGFBQU9SLFVBQVA7QUFDRCxLQVRIO0FBV0Q7QUFyRCtCOztBQXdEbENTLE9BQU9DLE9BQVAsR0FBaUJwQiwyQkFBakIiLCJmaWxlIjoiaGFyZC1zb3VyY2Utd2VicGFjay1wbHVnaW4vbGliL1N1cHBvcnRNaW5pQ3NzRXh0cmFjdFBsdWdpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBsdWdpbkNvbXBhdCA9IHJlcXVpcmUoJy4vdXRpbC9wbHVnaW4tY29tcGF0Jyk7XG5cbmNvbnN0IG1peGluQ3NzRGVwZW5kZW5jeSA9IGZ1bmN0aW9uKENzc0RlcGVuZGVuY3kpIHtcbiAgY29uc3QgRGVwZW5kZW5jeSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihDc3NEZXBlbmRlbmN5LnByb3RvdHlwZSkuY29uc3RydWN0b3I7XG4gIENzc0RlcGVuZGVuY3kucHJvdG90eXBlLnVwZGF0ZUhhc2ggPSBmdW5jdGlvbihoYXNoKSB7XG4gICAgRGVwZW5kZW5jeS5wcm90b3R5cGUudXBkYXRlSGFzaC5jYWxsKHRoaXMsIGhhc2gpO1xuICAgIGhhc2gudXBkYXRlKHRoaXMuY29udGVudCk7XG4gIH07XG59O1xuXG5jbGFzcyBTdXBwb3J0TWluaUNzc0V4dHJhY3RQbHVnaW4ge1xuICBhcHBseShjb21waWxlcikge1xuICAgIGxldCBDc3NEZXBlbmRlbmN5O1xuXG4gICAgcGx1Z2luQ29tcGF0LnRhcChcbiAgICAgIGNvbXBpbGVyLFxuICAgICAgJ21ha2UnLFxuICAgICAgJ1N1cHBvcnRNaW5pQ3NzRXh0cmFjdFBsdWdpbicsXG4gICAgICAoeyBkZXBlbmRlbmN5RmFjdG9yaWVzIH0pID0+IHtcbiAgICAgICAgY29uc3QgRGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jeUZhY3Rvcmllcy5rZXlzKCk7XG4gICAgICAgIGZvciAoY29uc3QgRGVwIG9mIERlcGVuZGVuY2llcykge1xuICAgICAgICAgIGlmIChEZXAubmFtZSA9PT0gJ0Nzc0RlcGVuZGVuY3knKSB7XG4gICAgICAgICAgICBDc3NEZXBlbmRlbmN5ID0gRGVwO1xuICAgICAgICAgICAgbWl4aW5Dc3NEZXBlbmRlbmN5KENzc0RlcGVuZGVuY3kpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG5cbiAgICBwbHVnaW5Db21wYXQudGFwKFxuICAgICAgY29tcGlsZXIsXG4gICAgICAnX2hhcmRTb3VyY2VGcmVlemVEZXBlbmRlbmN5JyxcbiAgICAgICdIYXJkTWluaUNzc0V4dHJhY3RQbHVnaW4gZnJlZXplJyxcbiAgICAgIChmcm96ZW4sIGRlcGVuZGVuY3ksIGV4dHJhKSA9PiB7XG4gICAgICAgIGlmIChkZXBlbmRlbmN5LmNvbnN0cnVjdG9yID09PSBDc3NEZXBlbmRlbmN5KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdDc3NEZXBlbmRlbmN5JyxcbiAgICAgICAgICAgIGxpbmU6IHtcbiAgICAgICAgICAgICAgaWRlbnRpZmllcjogZGVwZW5kZW5jeS5pZGVudGlmaWVyLFxuICAgICAgICAgICAgICBjb250ZW50OiBkZXBlbmRlbmN5LmNvbnRlbnQsXG4gICAgICAgICAgICAgIG1lZGlhOiBkZXBlbmRlbmN5Lm1lZGlhLFxuICAgICAgICAgICAgICBzb3VyY2VNYXA6IGRlcGVuZGVuY3kuc291cmNlTWFwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRleHQ6IGRlcGVuZGVuY3kuY29udGV4dCxcbiAgICAgICAgICAgIGlkZW50aWZpZXJJbmRleDogZGVwZW5kZW5jeS5pZGVudGlmaWVySW5kZXgsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJvemVuO1xuICAgICAgfSxcbiAgICApO1xuXG4gICAgcGx1Z2luQ29tcGF0LnRhcChcbiAgICAgIGNvbXBpbGVyLFxuICAgICAgJ19oYXJkU291cmNlVGhhd0RlcGVuZGVuY3knLFxuICAgICAgJ0hhcmRNaW5pQ3NzRXh0cmFjdFBsdWdpbicsXG4gICAgICAoZGVwZW5kZW5jeSwgeyB0eXBlLCBsaW5lLCBjb250ZXh0LCBpZGVudGlmaWVySW5kZXggfSwgZXh0cmEpID0+IHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdDc3NEZXBlbmRlbmN5Jykge1xuICAgICAgICAgIHJldHVybiBuZXcgQ3NzRGVwZW5kZW5jeShsaW5lLCBjb250ZXh0LCBpZGVudGlmaWVySW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXBlbmRlbmN5O1xuICAgICAgfSxcbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3VwcG9ydE1pbmlDc3NFeHRyYWN0UGx1Z2luO1xuIl0sInNvdXJjZVJvb3QiOiIvVXNlcnMvdHlsZXJhcmJ1cy9kZXYvcHJvdmlkZXIvc3JjIn0=

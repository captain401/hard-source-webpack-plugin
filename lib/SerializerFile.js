'use strict';

const fs = require('fs');
const join = require('path').join;

const _mkdirp = require('mkdirp');

const promisify = require('./util/promisify');

const mkdirp = promisify(_mkdirp);
const fsReadFile = promisify(fs.readFile, { context: fs });
const fsReaddir = promisify(fs.readdir, { context: fs });
const fsWriteFile = promisify(fs.writeFile, { context: fs });

class FileSerializer {
  constructor({ cacheDirPath }) {
    this.path = cacheDirPath;
  }

  read() {
    const assets = {};
    const cacheAssetDirPath = this.path;
    return mkdirp(cacheAssetDirPath).then(() => fsReaddir(cacheAssetDirPath)).then(dir => dir.map(name => Promise.all([name, fsReadFile(join(cacheAssetDirPath, name))]))).then(a => Promise.all(a)).then(_assets => {
      for (let i = 0; i < _assets.length; i++) {
        assets[_assets[i][0]] = _assets[i][1];
      }
    }).then(() => assets);
  }

  write(assetOps) {
    const cacheAssetDirPath = this.path;
    return mkdirp(cacheAssetDirPath).then(() => assetOps.map(({ key, value }) => {
      const assetPath = join(cacheAssetDirPath, key);
      return fsWriteFile(assetPath, value);
    })).then(a => Promise.all(a));
  }
}

module.exports = FileSerializer;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9TZXJpYWxpemVyRmlsZS5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJqb2luIiwiX21rZGlycCIsInByb21pc2lmeSIsIm1rZGlycCIsImZzUmVhZEZpbGUiLCJyZWFkRmlsZSIsImNvbnRleHQiLCJmc1JlYWRkaXIiLCJyZWFkZGlyIiwiZnNXcml0ZUZpbGUiLCJ3cml0ZUZpbGUiLCJGaWxlU2VyaWFsaXplciIsImNvbnN0cnVjdG9yIiwiY2FjaGVEaXJQYXRoIiwicGF0aCIsInJlYWQiLCJhc3NldHMiLCJjYWNoZUFzc2V0RGlyUGF0aCIsInRoZW4iLCJkaXIiLCJtYXAiLCJuYW1lIiwiUHJvbWlzZSIsImFsbCIsImEiLCJfYXNzZXRzIiwiaSIsImxlbmd0aCIsIndyaXRlIiwiYXNzZXRPcHMiLCJrZXkiLCJ2YWx1ZSIsImFzc2V0UGF0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxNQUFNQyxPQUFPRCxRQUFRLE1BQVIsRUFBZ0JDLElBQTdCOztBQUVBLE1BQU1DLFVBQVVGLFFBQVEsUUFBUixDQUFoQjs7QUFFQSxNQUFNRyxZQUFZSCwyQkFBbEI7O0FBRUEsTUFBTUksU0FBU0QsVUFBVUQsT0FBVixDQUFmO0FBQ0EsTUFBTUcsYUFBYUYsVUFBVUosR0FBR08sUUFBYixFQUF1QixFQUFFQyxTQUFTUixFQUFYLEVBQXZCLENBQW5CO0FBQ0EsTUFBTVMsWUFBWUwsVUFBVUosR0FBR1UsT0FBYixFQUFzQixFQUFFRixTQUFTUixFQUFYLEVBQXRCLENBQWxCO0FBQ0EsTUFBTVcsY0FBY1AsVUFBVUosR0FBR1ksU0FBYixFQUF3QixFQUFFSixTQUFTUixFQUFYLEVBQXhCLENBQXBCOztBQUVBLE1BQU1hLGNBQU4sQ0FBcUI7QUFDbkJDLGNBQVksRUFBRUMsWUFBRixFQUFaLEVBQThCO0FBQzVCLFNBQUtDLElBQUwsR0FBWUQsWUFBWjtBQUNEOztBQUVERSxTQUFPO0FBQ0wsVUFBTUMsU0FBUyxFQUFmO0FBQ0EsVUFBTUMsb0JBQW9CLEtBQUtILElBQS9CO0FBQ0EsV0FBT1gsT0FBT2MsaUJBQVAsRUFDSkMsSUFESSxDQUNDLE1BQU1YLFVBQVVVLGlCQUFWLENBRFAsRUFFSkMsSUFGSSxDQUVDQyxPQUNKQSxJQUFJQyxHQUFKLENBQVFDLFFBQ05DLFFBQVFDLEdBQVIsQ0FBWSxDQUFDRixJQUFELEVBQU9qQixXQUFXSixLQUFLaUIsaUJBQUwsRUFBd0JJLElBQXhCLENBQVgsQ0FBUCxDQUFaLENBREYsQ0FIRyxFQU9KSCxJQVBJLENBT0NNLEtBQUtGLFFBQVFDLEdBQVIsQ0FBWUMsQ0FBWixDQVBOLEVBUUpOLElBUkksQ0FRQ08sV0FBVztBQUNmLFdBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRCxRQUFRRSxNQUE1QixFQUFvQ0QsR0FBcEMsRUFBeUM7QUFDdkNWLGVBQU9TLFFBQVFDLENBQVIsRUFBVyxDQUFYLENBQVAsSUFBd0JELFFBQVFDLENBQVIsRUFBVyxDQUFYLENBQXhCO0FBQ0Q7QUFDRixLQVpJLEVBYUpSLElBYkksQ0FhQyxNQUFNRixNQWJQLENBQVA7QUFjRDs7QUFFRFksUUFBTUMsUUFBTixFQUFnQjtBQUNkLFVBQU1aLG9CQUFvQixLQUFLSCxJQUEvQjtBQUNBLFdBQU9YLE9BQU9jLGlCQUFQLEVBQ0pDLElBREksQ0FDQyxNQUNKVyxTQUFTVCxHQUFULENBQWEsQ0FBQyxFQUFFVSxHQUFGLEVBQU9DLEtBQVAsRUFBRCxLQUFvQjtBQUMvQixZQUFNQyxZQUFZaEMsS0FBS2lCLGlCQUFMLEVBQXdCYSxHQUF4QixDQUFsQjtBQUNBLGFBQU9yQixZQUFZdUIsU0FBWixFQUF1QkQsS0FBdkIsQ0FBUDtBQUNELEtBSEQsQ0FGRyxFQU9KYixJQVBJLENBT0NNLEtBQUtGLFFBQVFDLEdBQVIsQ0FBWUMsQ0FBWixDQVBOLENBQVA7QUFRRDtBQWxDa0I7O0FBcUNyQlMsT0FBT0MsT0FBUCxHQUFpQnZCLGNBQWpCIiwiZmlsZSI6ImhhcmQtc291cmNlLXdlYnBhY2stcGx1Z2luL2xpYi9TZXJpYWxpemVyRmlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IGpvaW4gPSByZXF1aXJlKCdwYXRoJykuam9pbjtcblxuY29uc3QgX21rZGlycCA9IHJlcXVpcmUoJ21rZGlycCcpO1xuXG5jb25zdCBwcm9taXNpZnkgPSByZXF1aXJlKCcuL3V0aWwvcHJvbWlzaWZ5Jyk7XG5cbmNvbnN0IG1rZGlycCA9IHByb21pc2lmeShfbWtkaXJwKTtcbmNvbnN0IGZzUmVhZEZpbGUgPSBwcm9taXNpZnkoZnMucmVhZEZpbGUsIHsgY29udGV4dDogZnMgfSk7XG5jb25zdCBmc1JlYWRkaXIgPSBwcm9taXNpZnkoZnMucmVhZGRpciwgeyBjb250ZXh0OiBmcyB9KTtcbmNvbnN0IGZzV3JpdGVGaWxlID0gcHJvbWlzaWZ5KGZzLndyaXRlRmlsZSwgeyBjb250ZXh0OiBmcyB9KTtcblxuY2xhc3MgRmlsZVNlcmlhbGl6ZXIge1xuICBjb25zdHJ1Y3Rvcih7IGNhY2hlRGlyUGF0aCB9KSB7XG4gICAgdGhpcy5wYXRoID0gY2FjaGVEaXJQYXRoO1xuICB9XG5cbiAgcmVhZCgpIHtcbiAgICBjb25zdCBhc3NldHMgPSB7fTtcbiAgICBjb25zdCBjYWNoZUFzc2V0RGlyUGF0aCA9IHRoaXMucGF0aDtcbiAgICByZXR1cm4gbWtkaXJwKGNhY2hlQXNzZXREaXJQYXRoKVxuICAgICAgLnRoZW4oKCkgPT4gZnNSZWFkZGlyKGNhY2hlQXNzZXREaXJQYXRoKSlcbiAgICAgIC50aGVuKGRpciA9PlxuICAgICAgICBkaXIubWFwKG5hbWUgPT5cbiAgICAgICAgICBQcm9taXNlLmFsbChbbmFtZSwgZnNSZWFkRmlsZShqb2luKGNhY2hlQXNzZXREaXJQYXRoLCBuYW1lKSldKSxcbiAgICAgICAgKSxcbiAgICAgIClcbiAgICAgIC50aGVuKGEgPT4gUHJvbWlzZS5hbGwoYSkpXG4gICAgICAudGhlbihfYXNzZXRzID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfYXNzZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXNzZXRzW19hc3NldHNbaV1bMF1dID0gX2Fzc2V0c1tpXVsxXTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IGFzc2V0cyk7XG4gIH1cblxuICB3cml0ZShhc3NldE9wcykge1xuICAgIGNvbnN0IGNhY2hlQXNzZXREaXJQYXRoID0gdGhpcy5wYXRoO1xuICAgIHJldHVybiBta2RpcnAoY2FjaGVBc3NldERpclBhdGgpXG4gICAgICAudGhlbigoKSA9PlxuICAgICAgICBhc3NldE9wcy5tYXAoKHsga2V5LCB2YWx1ZSB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgYXNzZXRQYXRoID0gam9pbihjYWNoZUFzc2V0RGlyUGF0aCwga2V5KTtcbiAgICAgICAgICByZXR1cm4gZnNXcml0ZUZpbGUoYXNzZXRQYXRoLCB2YWx1ZSk7XG4gICAgICAgIH0pLFxuICAgICAgKVxuICAgICAgLnRoZW4oYSA9PiBQcm9taXNlLmFsbChhKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGaWxlU2VyaWFsaXplcjtcbiJdLCJzb3VyY2VSb290IjoiL1VzZXJzL3R5bGVyYXJidXMvZGV2L3Byb3ZpZGVyL3NyYyJ9
